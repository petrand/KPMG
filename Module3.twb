<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20201.20.0219.0753                               -->
<workbook original-version='18.1' source-build='2020.1.0 (20201.20.0219.0753)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='data' inline='true' name='federated.0sbplso1a720nx1d4qnud08tlp3a' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data' name='excel-direct.1435v9y0zoaxuu1glqtt80irp1te'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/petrandreev/Desktop/SideProjects/VirtualInternships/KPMG/data.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
      </connection>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.500585' measure-ordering='alphabetic' measure-percentage='0.499415' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;New Zealand&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='customer_demographic' inline='true' name='federated.0gev93z1tafz6u18mxfg400pjf5k' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='customer_demographic' name='textscan.10taqb80oe5q4n18fs52t08lbdty'>
            <connection class='textscan' directory='/Users/petrandreev/Desktop/SideProjects/VirtualInternships/KPMG' filename='customer_demographic.csv' password='' port='0' server='' />
          </named-connection>
          <named-connection caption='data' name='excel-direct.0i6xoep0pgh4oc1bttqug1miwdwn'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/petrandreev/Desktop/SideProjects/VirtualInternships/KPMG/data.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.10taqb80oe5q4n18fs52t08lbdty' name='customer_demographic.csv' table='[customer_demographic#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_NZ' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='integer' name='customer_id' ordinal='1' />
            <column datatype='string' name='first_name' ordinal='2' />
            <column datatype='string' name='last_name' ordinal='3' />
            <column datatype='string' name='gender' ordinal='4' />
            <column datatype='integer' name='past_3_years_bike_related_purchases' ordinal='5' />
            <column datatype='date' name='DOB' ordinal='6' />
            <column datatype='string' name='job_title' ordinal='7' />
            <column datatype='string' name='job_industry_category' ordinal='8' />
            <column datatype='string' name='wealth_segment' ordinal='9' />
            <column datatype='string' name='deceased_indicator' ordinal='10' />
            <column datatype='string' name='default' ordinal='11' />
            <column datatype='string' name='owns_car' ordinal='12' />
            <column datatype='real' name='tenure' ordinal='13' />
            <column datatype='string' name='full_name' ordinal='14' />
            <column datatype='string' name='address' ordinal='15' />
            <column datatype='integer' name='postcode' ordinal='16' />
            <column datatype='string' name='state' ordinal='17' />
            <column datatype='string' name='country' ordinal='18' />
            <column datatype='integer' name='property_valuation' ordinal='19' />
            <column datatype='real' name='age' ordinal='20' />
            <column datatype='string' name='ageGroup' ordinal='21' />
            <column datatype='integer' name='purchases' ordinal='22' />
            <column datatype='real' name='Latitude' ordinal='23' />
            <column datatype='real' name='Longitude' ordinal='24' />
            <column datatype='integer' name='std_cost' ordinal='25' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_NZ&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>customer_id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[customer_id]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>customer_id</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>first_name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[first_name]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>first_name</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>last_name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[last_name]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>last_name</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>gender</remote-name>
            <remote-type>129</remote-type>
            <local-name>[gender]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>gender</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>past_3_years_bike_related_purchases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[past_3_years_bike_related_purchases]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>past_3_years_bike_related_purchases</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DOB</remote-name>
            <remote-type>133</remote-type>
            <local-name>[DOB]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>DOB</remote-alias>
            <ordinal>6</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_title</remote-name>
            <remote-type>129</remote-type>
            <local-name>[job_title]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>job_title</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>job_industry_category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[job_industry_category]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>job_industry_category</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wealth_segment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[wealth_segment]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>wealth_segment</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>deceased_indicator</remote-name>
            <remote-type>129</remote-type>
            <local-name>[deceased_indicator]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>deceased_indicator</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>default</remote-name>
            <remote-type>129</remote-type>
            <local-name>[default]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>default</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>owns_car</remote-name>
            <remote-type>129</remote-type>
            <local-name>[owns_car]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>owns_car</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>tenure</remote-name>
            <remote-type>5</remote-type>
            <local-name>[tenure]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>tenure</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>full_name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[full_name]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>full_name</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>address</remote-name>
            <remote-type>129</remote-type>
            <local-name>[address]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>address</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>postcode</remote-name>
            <remote-type>20</remote-type>
            <local-name>[postcode]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>postcode</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>state</remote-name>
            <remote-type>129</remote-type>
            <local-name>[state]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>state</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>property_valuation</remote-name>
            <remote-type>20</remote-type>
            <local-name>[property_valuation]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>property_valuation</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>age</remote-name>
            <remote-type>5</remote-type>
            <local-name>[age]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>age</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ageGroup</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ageGroup]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>ageGroup</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>purchases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[purchases]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>purchases</remote-alias>
            <ordinal>22</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Latitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Latitude]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>Latitude</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Longitude</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Longitude]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>Longitude</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>std_cost</remote-name>
            <remote-type>20</remote-type>
            <local-name>[std_cost]</local-name>
            <parent-name>[customer_demographic.csv]</parent-name>
            <remote-alias>std_cost</remote-alias>
            <ordinal>25</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='averagePurchases' datatype='real' name='[Calculation_3162863953840435200]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[purchases]/[past_3_years_bike_related_purchases]' />
      </column>
      <column caption='Profit' datatype='integer' name='[Calculation_3162863954106404865]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[purchases]-[std_cost]' />
      </column>
      <column aggregation='Avg' datatype='real' name='[Latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' datatype='real' name='[Longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[customer_id]' role='dimension' type='ordinal' />
      <column aggregation='Sum' datatype='integer' default-format='*0000' name='[postcode]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' name='[wealth_segment]' role='dimension' type='nominal' />
      <column-instance column='[Latitude]' derivation='None' name='[none:Latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Longitude]' derivation='None' name='[none:Longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[wealth_segment]' derivation='None' name='[none:wealth_segment:nk]' pivot='key' type='nominal' />
      <group hidden='true' name='[Exclusions (Latitude,Longitude)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Latitude:qk]' />
          <groupfilter function='level-members' level='[none:Longitude:qk]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (Latitude,Longitude,wealth_segment)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Latitude:qk]' />
          <groupfilter function='level-members' level='[none:Longitude:qk]' />
          <groupfilter function='level-members' level='[none:wealth_segment:nk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.671345' measure-ordering='alphabetic' measure-percentage='0.328655' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:wealth_segment:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Affluent Customer&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mass Customer&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;High Net Worth&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;New Zealand&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='AgeGroupPurchase'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Purchases By Age Group</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='customer_demographic' name='federated.0gev93z1tafz6u18mxfg400pjf5k' />
          </datasources>
          <datasource-dependencies datasource='federated.0gev93z1tafz6u18mxfg400pjf5k'>
            <column caption='Profit' datatype='integer' name='[Calculation_3162863954106404865]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[purchases]-[std_cost]' />
            </column>
            <column datatype='string' name='[ageGroup]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_3162863954106404865]' derivation='Avg' name='[avg:Calculation_3162863954106404865:qk]' pivot='key' type='quantitative' />
            <column-instance column='[ageGroup]' derivation='None' name='[none:ageGroup:nk]' pivot='key' type='nominal' />
            <column datatype='integer' name='[purchases]' role='measure' type='quantitative' />
            <column datatype='integer' name='[std_cost]' role='measure' type='quantitative' />
            <column-instance column='[purchases]' derivation='Sum' name='[sum:purchases:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]</rows>
        <cols>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:ageGroup:nk]</cols>
      </table>
      <simple-id uuid='{6EC8B70B-011E-4AF4-8C15-449F8FC49F22}' />
    </worksheet>
    <worksheet name='AveragePurchases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Sales per state</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='customer_demographic' name='federated.0gev93z1tafz6u18mxfg400pjf5k' />
          </datasources>
          <datasource-dependencies datasource='federated.0gev93z1tafz6u18mxfg400pjf5k'>
            <column caption='Profit' datatype='integer' name='[Calculation_3162863954106404865]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[purchases]-[std_cost]' />
            </column>
            <column-instance column='[Calculation_3162863954106404865]' derivation='Avg' name='[avg:Calculation_3162863954106404865:qk]' pivot='key' type='quantitative' />
            <column-instance column='[state]' derivation='None' name='[none:state:nk]' pivot='key' type='nominal' />
            <column datatype='integer' name='[purchases]' role='measure' type='quantitative' />
            <column datatype='string' name='[state]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='integer' name='[std_cost]' role='measure' type='quantitative' />
            <column-instance column='[purchases]' derivation='Sum' name='[sum:purchases:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:state:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]' scope='rows' value='Total Sales' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]</rows>
        <cols>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:state:nk]</cols>
      </table>
      <simple-id uuid='{35617424-B1CB-4FA7-9F5D-6ABC6B8DFB64}' />
    </worksheet>
    <worksheet name='Customer Map'>
      <table>
        <view>
          <datasources>
            <datasource caption='customer_demographic' name='federated.0gev93z1tafz6u18mxfg400pjf5k' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0gev93z1tafz6u18mxfg400pjf5k'>
            <column caption='Profit' datatype='integer' name='[Calculation_3162863954106404865]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[purchases]-[std_cost]' />
            </column>
            <column aggregation='Avg' datatype='real' name='[Latitude]' role='measure' semantic-role='[Geographical].[Latitude]' type='quantitative' />
            <column aggregation='Avg' datatype='real' name='[Longitude]' role='measure' semantic-role='[Geographical].[Longitude]' type='quantitative' />
            <column datatype='string' name='[address]' role='dimension' type='nominal' />
            <column-instance column='[address]' derivation='Attribute' name='[attr:address:nk]' pivot='key' type='nominal' />
            <column-instance column='[Latitude]' derivation='None' name='[none:Latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude]' derivation='None' name='[none:Longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[wealth_segment]' derivation='None' name='[none:wealth_segment:nk]' pivot='key' type='nominal' />
            <column datatype='integer' name='[purchases]' role='measure' type='quantitative' />
            <column datatype='integer' name='[std_cost]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_3162863954106404865]' derivation='Sum' name='[sum:Calculation_3162863954106404865:qk]' pivot='key' type='quantitative' />
            <column-instance column='[purchases]' derivation='Sum' name='[sum:purchases:qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[wealth_segment]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[Exclusions (Latitude,Longitude)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:Latitude:qk]' />
                <groupfilter function='level-members' level='[none:Longitude:qk]' />
              </groupfilter>
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-39.528652000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='176.85481999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-39.042698000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='175.61240599999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-37.751966000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='175.28993800000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-36.685459999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='174.66506699999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-34.064438000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='18.445720000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-34.051836000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='18.750931999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-34.050846' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='18.466179' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-34.013325999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='18.433036000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-33.993965000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='18.576757000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-26.262581000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-49.538313000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-25.982054000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='28.121876' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-23.195723000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-45.890000000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='-19.850000000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-62.516669999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='6.1567100000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-75.626936999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='6.5327089999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='80.138091000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='9.9680060000000008' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='76.312985999999995' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='10.715039000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='106.704128' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='14.503159999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='121.02965500000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='19.169917000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-96.143501999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='25.148308' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='55.199066000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='25.255980000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='55.458497000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='26.195436999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-81.742718999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='26.736450000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-80.92062' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='27.044321' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-82.249442000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='27.335121000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-80.431906999999995' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='27.401302000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-82.315586999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='27.857600000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-97.643359000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='28.184936' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-82.737775999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='28.385719999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-81.501050000000006' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='28.565390999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-81.353887999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='29.575282999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-98.347701000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='29.605277000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-95.306265999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='29.634433000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-98.600183000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='29.673085' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-95.312342999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='29.711524000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-98.094104000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='29.735576000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-98.090097' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='29.811029999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-102.14819' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='29.909153' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-95.455344999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='30.045963' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-81.782550000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='30.159772' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-81.854679000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='30.161494999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-97.640107' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='30.177164000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-95.549640999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='30.339552000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-97.780012999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='30.348600999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-91.090211999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='30.495317' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-86.027102999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='30.520396999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-98.374381999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='30.642654' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-90.403919999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='32.368482999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-106.77525' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='32.691243999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-87.971127999999993' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='32.724587' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-97.082993000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='32.803294999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-94.171533999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='32.845854000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-117.264562' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='32.868169000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-97.354972000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='32.976922000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-96.958416' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.177506999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-96.776201' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.322828999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-111.852926' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.460709000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-82.092186999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.557476000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-83.965497999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.596919999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-96.176817' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.687086000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-117.625305' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.721035999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-116.288696' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.721165999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-116.264139' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.732253999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-117.769567' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.982835999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-83.471974000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='33.988625999999996' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-84.563410000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='34.016832999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-118.39677399999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='34.065899000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-118.244589' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='34.088672000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-118.037397' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='34.198009999999996' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-118.42456' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='34.988213000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-82.185565999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.006433000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-81.995247000000006' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.008602000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-81.992964999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.085163000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-111.66377900000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.140427000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.988259999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.241857000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-114.042635' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.291072' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-80.688248000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.418221000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-119.087529' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.553516000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-121.075626' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.754322999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-86.952640000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.782462000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-78.408613000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.799433000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-82.661573000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.873162999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-84.170998999999995' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='35.900151999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-109.101215' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='36.040886' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-78.906357999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='36.052858999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-101.99921500000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='36.092063000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-79.910570000000007' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='36.216662999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-76.987266000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='36.713957999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-121.66087899999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='37.198951000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-76.835807000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='37.293565999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-82.550128999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='37.295731000000004' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-107.879329' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='37.674039999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-77.546153000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='37.816288' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-25.522034999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='38.016795000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-90.312679000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='38.429321999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-122.742373' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='38.625250999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-90.444355000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='38.666314' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-121.176953' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='38.733477000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-77.066811000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='38.751083000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-77.472791999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='38.778958000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-90.282957999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='38.785223999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-90.267647999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='38.935085999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-90.300590999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='38.996935999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-78.381276' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.144128000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-80.034081999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.268506000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-119.57667600000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.307924' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-78.673826000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.340366000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-98.473141999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.440688000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-116.598569' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.471885' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-86.053650000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.52552' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-110.57293' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.589562999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-119.731426' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.608645000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-119.175411' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.650492' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-104.954666' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.704374999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-75.670496' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.705976' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-105.02935600000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.795748000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-84.226712000000006' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.870269' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-86.438179000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.877502999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-88.102914999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.926234999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-75.142380000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.936681999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-105.137344' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='39.968817999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-86.129864999999995' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.025179000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-74.867936999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.035812999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-82.873739' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.147568999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-105.092467' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.147820000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-105.091775' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.184195000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-83.181342999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.437280000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-78.316744' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.519497999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-104.712084' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.531593999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-104.929962' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.539448999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-74.172820000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.548670000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-81.237049999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.571885000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-105.10425600000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.623010999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-74.279185999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.731667000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-74.137242999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.737929000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-74.345231999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.760503999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-8.7050579999999993' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='40.956865999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-72.548000000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.086024999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-97.019799000000006' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.184398999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-73.194675000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.213158999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-122.275301' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.239305999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-75.904189000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.352052' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-72.577798999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.418655000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-81.75752' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.508001999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-85.407776999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.593027999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-87.694255999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.610517999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-74.451188000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.725839000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-86.364080999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.729984999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-93.324532000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.919781999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='2.2541609999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.921031999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='2.2680699999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.984209999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-90.954111999999995' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='41.996727999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-75.401751000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.048371000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-104.918402' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.086089000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-87.701982999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.093468000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-75.434866' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.121285' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-71.320065' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.277997999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-71.341989999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.299849999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-71.266180000000006' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.299948000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-71.265550000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.309019999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-83.095950999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.331524999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-83.072388000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.342362000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-71.259974999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.367226000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-71.152885999999995' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.409768' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-71.009403000000006' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.474912000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-73.212536999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.502110999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-83.392700000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.655799999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-105.18387' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.691097999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-83.130482000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.704003999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='27.711608999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.734820999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-71.510969000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.839753000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-78.757638' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.907874999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-78.899804000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.918013999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-107.932029' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='42.921115999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-112.477294' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.072448000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.388658000000007' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.091166999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-75.236345' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.093308999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.352013999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.096228000000004' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.364586000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.114330000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.299924000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.114863' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.365238000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.119146999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-87.914264000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.122886000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.321951999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.138162000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.311255000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.141511999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.404200000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.153120000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.379930999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.154302999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.375947999999994' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.182046999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-79.210784000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.285671000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-78.953393000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.375934999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-86.248238999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.600734000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-116.262417' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.620719000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='3.8514210000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.786873999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-79.417443000000006' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.858508' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-111.11380699999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.881399999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-79.224795' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.884996999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-79.012187999999995' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='43.890951999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-79.430482999999995' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='44.086205999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-92.509415000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='44.158831999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-79.792440999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='44.218747999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-1.1501600000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='44.312550000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-105.481117' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='44.356042000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-79.250872000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='44.431016999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-75.883577000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='44.527500000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-85.402000000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='44.542799000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-68.271873999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='44.848081000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-73.366158999999996' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='44.986913999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-90.525412000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='45.158844000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-89.646089000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='45.184199' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-85.558368999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='45.584446999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-73.637347000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='45.896617999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-77.287565999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='46.381332999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-90.155218000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='46.470329' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='14.849368' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='46.470351999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='14.846204' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='46.470545000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='14.849094000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='46.583663000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-81.191453999999993' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='46.653804000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-120.536934' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='46.677692999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-123.701922' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='46.804025000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='16.105892000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='47.024391000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='4.8645670000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='47.127222000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='8.3237240000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='47.135325999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='7.2634590000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='47.137050000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-122.07789' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='47.707822' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-122.51073' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='48.132426000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='12.561196000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='48.166778000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-94.511352000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='48.179627000000004' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='11.575462999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='48.242970999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='14.260631999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='48.451906999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-123.431533' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='48.642826999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='16.493392' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='49.094912999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-117.756462' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='49.761329000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='13.005008999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='49.980141000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='1.36819' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='50.029232' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='19.929528000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='50.425406000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='15.647986' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='50.621907' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='18.136008' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='50.679844000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='10.919637999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='50.864420000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='12.076796' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='51.024137000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='5.7087630000000003' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='51.305847999999997' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='7.3371269999999997' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='51.618462999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-2.5131920000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='51.682569000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='13.211046' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='51.868661000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-4.2808060000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='52.264637999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='6.703322' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='52.762467000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='6.890002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='52.917318000000002' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-1.1665449999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='53.032057999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-1.077974' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='53.349975000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-6.456029' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='53.534730000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-113.281794' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='53.562389000000003' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-113.266717' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='53.778964999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-7.4940889999999998' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='54.552354999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-5.7603290000000005' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='55.991810000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='11.995046' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='59.511040000000001' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='5.5112940000000004' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='59.565286999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='16.442388000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='61.323197' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-149.53313199999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='61.336956999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='21.571159000000002' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='64.103020999999998' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='-21.922978000000001' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='66.304203999999999' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='14.130633' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='69.383618999999996' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='20.293759999999999' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='404.0' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='404.0' />
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:Latitude:qk]' member='429.0' />
                  <groupfilter function='member' level='[none:Longitude:qk]' member='429.0' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[Exclusions (Latitude,Longitude,wealth_segment)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:Latitude:qk]' />
                <groupfilter function='level-members' level='[none:Longitude:qk]' />
                <groupfilter function='level-members' level='[none:wealth_segment:nk]' />
              </groupfilter>
              <groupfilter function='reorder-dimensionality'>
                <groupfilter function='union'>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:wealth_segment:nk]' member='&quot;Affluent Customer&quot;' />
                    <groupfilter function='union'>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-42.842685000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='147.314841' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-41.522919000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='147.646153' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-37.014347999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='143.48045200000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-36.965009999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='143.12373299999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-36.947476000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='143.22579060000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-35.051476000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.60843600000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.994021000000004' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.525014' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.991517000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.82712000000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.851951999999997' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.52244200000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.851337000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.53605899999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.846437000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.642404' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.845826000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.66015200000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.828195000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.65601699999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.55921' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.74565' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.494981000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='146.58690300000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.299872000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.813665' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.02516' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.78406' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.991150000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.81161' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.824791000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.87746199999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.811036000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.751586' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.803151' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.825076' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.768062' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.961811' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:wealth_segment:nk]' member='&quot;High Net Worth&quot;' />
                    <groupfilter function='union'>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-37.014347999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='143.48045200000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-36.435924999999997' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='140.93136899999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-35.551988999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.62133800000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.977620999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.605164' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.887130999999997' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.677134' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.876258' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.62966' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.851503999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.52217400000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.851492' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.52132900000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.851444000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.516299' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.846991000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.63134299999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.808455000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.61163999999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.784230999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.70364599999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.554749999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='137.08512999999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.494981000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='146.58690300000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.292259999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.72604' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.247376000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.84528400000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.085250000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.99272000000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.053609999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.96372' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.857633' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.943428' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-20.746722999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='116.805198' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:wealth_segment:nk]' member='&quot;Mass Customer&quot;' />
                    <groupfilter function='union'>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-42.842685000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='147.314841' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-41.589759999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='146.9819' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-41.190494999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='146.353498' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-37.829222999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='140.813999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-37.014347999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='143.48045200000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-35.115839999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.48063200000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.988022999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.517324' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.987729000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='137.40104400000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.976149999999997' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='117.84399000000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.969889000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='117.849507' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.893844999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.49927400000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.862347999999997' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.69034500000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.852151999999997' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.51769300000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.852131' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.520352' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.851646000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.51718099999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.851531999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.52198899999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.851339000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.52490299999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.851092000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.52957000000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.850000000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.55076' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.847856999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.61182299999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.846629' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.619857' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.844678999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.67018300000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.819710999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.721521' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.799014999999997' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.72539599999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.550570999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.92445699999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.454309000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.820303' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.376882999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='136.095055' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-34.309238999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='138.45675199999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-33.694284000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='117.56286' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-33.266618999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.72959400000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-33.030540999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='137.55473799999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.494981000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='146.58690300000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.416794000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.770236' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.29177' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.72566999999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.228470000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.87665' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.162210000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.84403' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.102974000000003' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='116.00556899999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-32.017870000000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.917213' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.989879999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.81185000000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.938672400000002' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='116.0058949' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.897310000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.84734' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.889861' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.853082' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.888743999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='116.032303' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.809996999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.835697' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.794' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.78959' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.781593000000001' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.990365' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.767595' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.963233' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.753098999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.989515' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-31.634969999999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='115.693' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-24.316020099999999' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='116.82155229999999' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-16.059539999999998' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='130.85543000000001' />
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:Latitude:qk]' member='-13.235229' />
                        <groupfilter function='member' level='[none:Longitude:qk]' member='131.111906' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <order>
                  <hierarchy name='[none:Latitude:qk]' />
                  <hierarchy name='[none:Longitude:qk]' />
                  <hierarchy name='[none:wealth_segment:nk]' />
                </order>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0gev93z1tafz6u18mxfg400pjf5k].[Exclusions (Latitude,Longitude)]</column>
            <column>[federated.0gev93z1tafz6u18mxfg400pjf5k].[Exclusions (Latitude,Longitude,wealth_segment)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:Longitude:qk]' field-type='quantitative' max='17824641.272300951' min='14446071.436924644' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:Latitude:qk]' field-type='quantitative' max='-2359025.8161819787' min='-4781502.502020306' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='size' field='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]' value='Total Sales'>
              <formatted-text>
                <run>Total Sales</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:wealth_segment:nk]' />
              <size column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]' />
              <text column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:Calculation_3162863954106404865:qk]' />
              <tooltip column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[attr:address:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:Latitude:qk]</rows>
        <cols>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:Longitude:qk]</cols>
      </table>
      <simple-id uuid='{4D3457F0-D097-4056-9A11-F9915CB98953}' />
    </worksheet>
    <worksheet name='Industry&amp;Purchases'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Sales by Industry</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='customer_demographic' name='federated.0gev93z1tafz6u18mxfg400pjf5k' />
          </datasources>
          <datasource-dependencies datasource='federated.0gev93z1tafz6u18mxfg400pjf5k'>
            <column caption='Profit' datatype='integer' name='[Calculation_3162863954106404865]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[purchases]-[std_cost]' />
            </column>
            <column-instance column='[Calculation_3162863954106404865]' derivation='Avg' name='[avg:Calculation_3162863954106404865:qk]' pivot='key' type='quantitative' />
            <column datatype='string' name='[job_industry_category]' role='dimension' type='nominal' />
            <column-instance column='[job_industry_category]' derivation='None' name='[none:job_industry_category:nk]' pivot='key' type='nominal' />
            <column datatype='integer' name='[purchases]' role='measure' type='quantitative' />
            <column datatype='integer' name='[std_cost]' role='measure' type='quantitative' />
            <column-instance column='[purchases]' derivation='Sum' name='[sum:purchases:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:job_industry_category:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:job_industry_category:nk]' />
              <groupfilter function='member' level='[none:job_industry_category:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:job_industry_category:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:job_industry_category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]</rows>
        <cols>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:job_industry_category:nk]</cols>
      </table>
      <simple-id uuid='{0F4D258E-E429-4649-A4AD-FA7E1D909330}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Sales by Job and Age group</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='customer_demographic' name='federated.0gev93z1tafz6u18mxfg400pjf5k' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0gev93z1tafz6u18mxfg400pjf5k'>
            <column caption='Profit' datatype='integer' name='[Calculation_3162863954106404865]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[purchases]-[std_cost]' />
            </column>
            <column datatype='string' name='[ageGroup]' role='dimension' type='nominal' />
            <column datatype='string' name='[job_industry_category]' role='dimension' type='nominal' />
            <column-instance column='[ageGroup]' derivation='None' name='[none:ageGroup:nk]' pivot='key' type='nominal' />
            <column-instance column='[job_industry_category]' derivation='None' name='[none:job_industry_category:nk]' pivot='key' type='nominal' />
            <column datatype='integer' name='[purchases]' role='measure' type='quantitative' />
            <column datatype='integer' name='[std_cost]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_3162863954106404865]' derivation='Sum' name='[sum:Calculation_3162863954106404865:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:Calculation_3162863954106404865:qk]' />
              <color column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:Calculation_3162863954106404865:qk]' />
              <text column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:ageGroup:nk]' />
              <text column='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:job_industry_category:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{2FD83286-9760-4818-BD60-1AF535469892}' />
    </worksheet>
    <worksheet name='Sheet 6'>
      <table>
        <view>
          <datasources>
            <datasource caption='customer_demographic' name='federated.0gev93z1tafz6u18mxfg400pjf5k' />
          </datasources>
          <datasource-dependencies datasource='federated.0gev93z1tafz6u18mxfg400pjf5k'>
            <column caption='Profit' datatype='integer' name='[Calculation_3162863954106404865]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[purchases]-[std_cost]' />
            </column>
            <column-instance column='[Calculation_3162863954106404865]' derivation='Avg' name='[avg:Calculation_3162863954106404865:qk]' pivot='key' type='quantitative' />
            <column-instance column='[wealth_segment]' derivation='None' name='[none:wealth_segment:nk]' pivot='key' type='nominal' />
            <column datatype='integer' name='[purchases]' role='measure' type='quantitative' />
            <column datatype='integer' name='[std_cost]' role='measure' type='quantitative' />
            <column datatype='string' name='[wealth_segment]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]</rows>
        <cols>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:wealth_segment:nk]</cols>
      </table>
      <simple-id uuid='{932D2AFA-B3F9-45A9-A19F-4EFC7AB475DE}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='4' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98380' id='7' param='horz' type='layout-flow' w='99064' x='468' y='810'>
            <zone h='98380' id='5' type='layout-basic' w='89702' x='468' y='810'>
              <zone h='49190' id='3' name='Customer Map' w='44856' x='45314' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49190' id='10' name='AgeGroupPurchase' w='22421' x='468' y='810'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49190' id='12' name='Sheet 4' w='44846' x='468' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49190' id='14' name='Industry&amp;Purchases' w='44856' x='22889' y='810'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49190' id='15' name='AveragePurchases' w='22425' x='67745' y='810'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98380' id='6' is-fixed='true' param='vert' type='layout-flow' w='9362' x='90170' y='810'>
              <zone h='14778' id='8' name='Customer Map' pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]' type='size' w='9362' x='90170' y='810'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='8705' id='9' name='Customer Map' pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:wealth_segment:nk]' type='color' w='9362' x='90170' y='15588'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='6579' id='11' name='AgeGroupPurchase' pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]' type='color' w='9362' x='90170' y='24293'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='6579' id='13' name='Sheet 4' pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:Calculation_3162863954106404865:qk]' type='color' w='9362' x='90170' y='30872'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1750' minheight='1750' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='19' type='layout-basic' w='100000' x='0' y='0'>
              <zone h='98380' id='18' param='vert' type='layout-flow' w='99064' x='468' y='810'>
                <zone fixed-size='280' h='49190' id='10' is-fixed='true' name='AgeGroupPurchase' w='22421' x='468' y='810'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6579' id='11' name='AgeGroupPurchase' pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]' type='color' w='9362' x='90170' y='24293'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49190' id='14' is-fixed='true' name='Industry&amp;Purchases' w='44856' x='22889' y='810'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49190' id='15' is-fixed='true' name='AveragePurchases' w='22425' x='67745' y='810'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49190' id='12' is-fixed='true' name='Sheet 4' w='44846' x='468' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6579' id='13' name='Sheet 4' pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:Calculation_3162863954106404865:qk]' type='color' w='9362' x='90170' y='30872'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49190' id='3' is-fixed='true' name='Customer Map' w='44856' x='45314' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='14778' id='8' name='Customer Map' pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]' type='size' w='9362' x='90170' y='810'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='8705' id='9' name='Customer Map' pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:wealth_segment:nk]' type='color' w='9362' x='90170' y='15588'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{5DCF5364-E28B-4597-AB4E-4F56A00EE049}' />
    </dashboard>
  </dashboards>
  <windows source-height='51'>
    <window class='worksheet' name='AveragePurchases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[:Measure Names]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:country:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:customer_id:ok]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:gender:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:owns_car:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:state:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[yr:DOB:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A1D0BBD7-DCDB-44C4-839E-531AEC06CA7B}' />
    </window>
    <window class='worksheet' name='Industry&amp;Purchases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:job_industry_category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6250C820-1825-4E66-A070-8399C0CD8785}' />
    </window>
    <window class='worksheet' name='AgeGroupPurchase'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:ageGroup:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:owns_car:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F5BBE6C6-646A-485F-8ECE-E61C097D7A09}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:Calculation_3162863954106404865:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:address:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:ageGroup:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:gender:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:job_industry_category:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:last_name:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:owns_car:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:postcode:ok]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:wealth_segment:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:Calculation_3162863954106404865:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D0A208C7-5E30-4B4F-AF28-9AAC9D0543DB}' />
    </window>
    <window class='worksheet' name='Customer Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:purchases:qk]' type='size' />
          </strip>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:wealth_segment:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:purchases:qk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:address:nk]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:customer_id:ok]</field>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:postcode:ok]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{209EBE45-B1FB-4487-AF75-F051A0CCA791}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='AgeGroupPurchase'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[avg:Calculation_3162863954106404865:qk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='AveragePurchases'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Customer Map'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:wealth_segment:nk]</field>
            </color-one-way>
          </highlight>
          <default-map-tool-selection tool='2' />
        </viewpoint>
        <viewpoint name='Industry&amp;Purchases'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sheet 4'>
          <highlight>
            <color-one-way>
              <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[sum:Calculation_3162863954106404865:qk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='12' />
      <simple-id uuid='{9D66FC06-31BF-4EF6-AEB4-BC85A7379DD1}' />
    </window>
    <window class='worksheet' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0gev93z1tafz6u18mxfg400pjf5k].[none:wealth_segment:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E6E4C73C-C918-4D17-85DD-8F79CA9855A2}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='AgeGroupPurchase' width='384'>
      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
      M+n4BSAOFz0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='AveragePurchases' width='384'>
      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
      N/+DAGA84wKQTCaVTCZVKBSu+XfW5/o9z1O5XFYikeheyC+fzkmlUrrnnns2/G40GlU0GtWB
      Awc2/NxxHDmOc8VHRQDAzWBcAD6t9SWh/LUO4N8Fk9EAYCgCAACGIgAAYCgCAACGIgAAYCgC
      AACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgC
      AACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgC
      AACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgC
      AACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgC
      AACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgC
      AACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgCAACGIgAAYCgC
      AACGIgAAYCgCAACGIgAAYCgCAACGIgAAYKj/D9mwhTyAX+lGAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='Customer Map' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9eXAd13X/+b29vQ0PAEGC+yKKmxZKMmVrtS3LcmzJVlmyrExiy/F4jZdf
      MplKUlOpcmX+GP8zVZmlZlL+zW8c/TzjjJ1YsRXHlpNQi+3YskxZkiVroUTSNAiIJAgCEEAA
      b1+6e/6AbqvR6H3vfvdThSKB16/79u3b55x77jnnkpmZGZXjODCCo6qq4zGEEN/f9XK+rLG0
      tIShoSEIghD4XGZ9SfuJEIL+8VchT02tO4Yb3wTxhhugBG5BePh9vl7Hk5vrxDG+6XFpHtdp
      aaOqqmv61aw9HMdBkiTtM6OsFziOC+WlSwP6DiGExP6AFMVZdJi1y/gg7Y6lx+uP0V87ifsO
      g3q9HooCsHoGdOATQkBEEb2f/BTo99ccI/3BfwNeEEB8KuMo8GucuR1TTgLEzXn1ytVre4xY
      jWOrayaB1z6Lsh2Koqxrj7FNoihqSoAQAp7ntc9ya/rTzrH6zK/FnQbog6QPWn8vWb+3INjd
      N/1MVVUIh69G8SP3ApK0+iEhkN57O8R3vwtKjvvOTDgYx5LbcxBCwHEcOI5z9X16fBCBScd2
      0uPba59FAe0HM0Vp7J92uw1ZljVlIcuy9lk+TP83MROIFL0A0P/NjYVl1dlhYdduJ8weeFqm
      qGlC3yeKokB83x0Qb7oRyuwsuLExYMOGNS9GWHAcZzr2oiZKARXkvLRddjOUpAV8VrGaJcmy
      jFqtBlEUIQgCCoUCgNWxmSsFAKwfYE5uGUVR1mnQsNdE3EyR9UrAy8tr9bLQ+8/S+k5QgWXW
      F4IgWJ93eBjc8LD2q1VfUevJL8bnbzyXldDLswKnY9ysL/J831FjpQRUVUW320W324UsyyiX
      y6vyIYlGxoFXIaq3SKxcKn4sEy/TxTCmyUayZE0Faavdd2VZRr1etz2m2+2i0+lovyuKEkjo
      u2kXwASen3sf5P5yAzV8rcZwr9dDr9eDoij5mwHo8etaMSoAL8fHSZaEe5TYCWpZlvHNb34T
      oiiiXq/ji1/8IgRBwIMPPoh2u40dO3bgHe94B/7hH/4BiqLgYx/7GFRVxYMPPog777wTd9xx
      R6htNbPQrJ7jIAg6ry6fQVeYFH2/OY0f/ftBZ131eh1AjheBg2Llo9RrVvqThoWpQcSNi4/n
      eTzwwAM4ePDgmnC45eVl3HDDDfjwhz+MZ599Fp/61Kfw5S9/GU8//TQuv/xy/NEf/RFEUbQ8
      r34R1M7NZrTGjOPE7G/0/HnHzfOjRDE7ziNmHgdCCARBgNTuQFhchNDpgOf51b8n2NZYCLLA
      mgR2Pjyzz60wu++8vTxu+2JychLHjh3Djh07tL/de++9mJiYwF//9V/j0KFDkCQJpVIJ3W7X
      cd2EWaHhkJV3Mq3QWYD+XyN0oVd+5hk0f/JTqCs1cBs3onDXnajvO8RmAEb0ll0YBIns0VuP
      XmcZZqFhVlZoWvAqVN08o3a7jV27duEv/uIvcP78eSwvL6PdboPnedx5553YtWsXtmzZgtde
      ew2vvPIKdu/e7akNXqxYLwyCgmEWfTCcDBFCCDhCoPz2NNoPfx/KhRmo9Trk119H67vfRe/1
      s/mfAQDhzwK8+C29DnC75BfjcVbhdE73m9aXzs/z4TjOVgArioIf/OAHuHTpEm677TY89thj
      uO6663D27FkcPXoUR44cwc0334zvfve76HQ6+PjHP46XX34ZzzzzDBRFwcaNG3Ho0CHtfPqX
      LgrBT68xKDiFhbolTYlicWMlj1RVBVQV/Zdfhtpqrf1seQUjZydAZmdn1bxkAtvhdoC5iVM2
      C1+zOi4IbrI5/bw4aQwNnZqawtatW1EsFn193+p5GMNAz507hx07dnjqA0VRtBwBJwXgZBy4
      MUbS+HziIIgSMPvuoPSjWUYwReA49B/+Z3Sf/MXaDzgOhbs/NBgzgLDwMqCiskDM2uB21mA8
      Nk9YzQSMgoGuA7hZfNV/7tTvdt/Vf67PCbCbvTGCY+UXzxt6o9WICkC49lr0nvv1mlkAGR6G
      cPXVTAEYsROg+gEVR8aim2uYCaGoXBNpx0wJGBP99H83YjzOqb5S2Ilrg764HHYeyKAoAMBa
      CciKAvHAfhTv/yg6P6WLwGMo3HUXsHMHUwBmhOEqCgu/iTJOFmheoaUX9FFTfu85zr4ahGcT
      BP0zNesr43PXf28Q+tVuFtBTVQg334Ty4cNQW02QoSEopRLkvCeChY3ZYHK7JuCXoJmSgzD4
      jTjdsz50Tv8dO5dOlDDhb4+XXAFgcMNLOY7T6vyYsmF09QcArQc6MAogLos9LQy6QHEKj3M6
      Joxr21mscbQjD3g1rMzyZlj/rkL7kuM4dDqdfBaDc8KrlWC0Es0GFFvIYxhxY9WzcWKP31n1
      ICuBdruNr371q9i7dy+uvfZa3HTTTQBW6//8zd/8Dfbt24frrrsOP/zhD9Hr9fKjAIyLfW4s
      QK91fgZlEDFW4QAo09NQ+zL4XTuh8vxAzB6TwsqPb8R4jFWEln7GPyjvbr/fhyAIuOOOO7Bv
      3z4Aq/311FNP4e1vfzuWlpbw5JNP4s///M8xPT2dDwVgVSYhLCVgvE6QczAywsICGv/PNyFP
      TgIAuPFxlD7zaXB7L2PPO2XYCfhBEfyUUqmEe+65B8eOHcPRo0fxp3/6p1haWsIvf/lL3Hff
      fXj99dfR7XYhSRLK5XK8pSDifHH017JKlKBlH7wOEmNpBbPP01xygWEPB6D1/31bE/4AoMzP
      o/X/fhMwZFQywsWPwHaaNQySEmg0Grjssstw3333QZZltFottNttHD58GC+88AKmpqYwPj6O
      1157Db/5zW/inQHoF8Xiup5REdgtxoUtsAdp6pknlIsXIZ89u/7v8/OQz0yCu+rKBFrFsMMp
      THRQEAQB3//+99FsNvHRj34U3/jGN/CHf/iH+MhHPoJWq4WJiQns378f3/72tzEyMhKfAggq
      XO3cO1bnNvu7fq3ASwatG+JIDmMwBgWnOk9WDLLhVS6X8elPfxrA6l4Y9957L8bHxwGsuocO
      Hz4MAPj85z8PIIEwUL8Px8m/78X/72Um4rWeyKDUH8kz3Nat4Hfvhnz69Nq/j28Cf/leMBUf
      LXpDyo0S8CJP6Ewhr++pcV/r7du3a38zS5KLrReicK9QX7vxb0YfvN5fbzw+ijYxso0CoPTf
      /hH4vXu1v60uAn8GKJWSa9iAYies6Rqe8ccM/fuZpXIpHMeB53lXSovKOFmWtR/j7/q/xzID
      CJqebVXnw+kYL4lfYblvBnn6mSs2bkTlf/jL1TBQWQa/k4WBpgk/Vr/Z39P+rvJQwE08BjL9
      HNTL3gPsejcUF0PQ7ThNJAxU74IJY0pmdrP0fLaV8gwLxGGRhYHFeAtLixEA2bkTnG782FmX
      jHjQl18JsvAbd1CKH7ilCZDn/jNIZwWYewXc2H4o5W223zF19bw5UzIqQ18KwM2Ku1VsvtU5
      vF7f7P8UL5Ub7Yqm+Z0mMgWQHWgosJvj7DD6Xhn+MTPY9Fn4QeSF2Wd5e1ftjF5jglzgGYC+
      A/VCP8zyCG5cQPrrBLmW/vv6TmRJX9GT1Is4Pz+PH/zgB1AUBZ/85CdRLpcBAI8++igmJyfx
      oQ99CO12Gz/96U9x66234tprr8UzzzyDF154Affccw927tyZSLsHDf276aeUi9U504wyug/c
      DX8CTD8L9bLboVS2wW0UglMiLCEknEVgs31r9QuyWRKaZhUhvSaLpX1QpZWkxkm9XscDDzyA
      Q4cO4Te/+Q0A4MUXXwQAfOlLX8LOnTtx9OhRfOYzn8GTTz6JpaUlPPvss/jsZz+L73//++j3
      +4m0e5AIu1qr3yTQqKHtoj8qJ0A9cDeU2/8nqJe9FyDcms+Dtt+3AnBT6Mpt4/woiTgenPEe
      3Bb4StugYtizd+9ezM7O4mc/+xmuvfZaAMDJkyfx/PPP46tf/SpOnDgBURRRLBYxNjaG6elp
      7NmzB8ViEUNDQ+j1egnfweChWbA+BGGa31FCCHieX/Ojj24y+ywIvlxAVolUeiFudoz+M+OC
      hLFok91Uz+iicZPt6xan7ztNQdM6sBjWnDt3Dg8//DD+6q/+CqU3wzzL5TIeeOAB7Ny5E1//
      +te1UOJut4tqtYrl5WUAQLfbzW1MeV5J+zs6OTmJRx99FIcOHcJ73vMePPLIIzh37hze//73
      o9Fo4LnnnsPY2Bj+4A/+IPC1Qhu5XrSqnRA11tlx48PTWwFxzwz02pkJgmxy9OhR8DyPb33r
      W5iYmMAPfvAD3HTTTfjWt76FBx98EFdeeSWq1Sr+7u/+Dq1WCzt37sTc3By+9rWvYdOmTZAk
      KelbYLgk7cJflmU88sgj+MIXvoDTp09jbm4Ohw8fxhe+8AUcPXoU+/fvx5e+9CV0u12cP38+
      8PVCDQO1Wr33cnzQ68dFmqeRWSWp/vzCF76g/X96ehqjo6PYvHkzvvKVr6DdbqNSqYAQgnq9
      rv3/L//yL9FoNLTfGeER5VoQNdRKpRI4jkOtVovsWn4ghKDVauGJJ57AzMwM5ubmcOWVV+Jr
      X/sa3vnOd0IURXzlK18Bx3H45Cc/GTj6jMzOzqqCEJ4e0IdOus1ciws3EQRMsCfD1NQUtm7d
      imKxGOt1w5q5GV9E/bhmY8o9YQeNGM8lCAKGhobQ7/fRaDRCu05YcBwHWZbx/PPP46WXXsIH
      P/hBPPzww7jnnntw4MABAKtj69vf/jZuuOEGHDx4MJAMDT0RzOtAD3sW4HQt/TXtwkvZCzsY
      qKoaSQy/n3Gdx5h0r4QtC4z9WSwWU++uff7553HmzBnU63WUSiUcP34c1WoVp0+fRr1eR7vd
      xquvvorf+73fC3yt0GcAfgjy0L181/jQ7awNZrXFS1IzgKhwkyxp9Z1BHnt+9gD2IgMIIRBF
      EcDqAn7aoGuZy8vL2LBhw7rPVVVFvV5HuVwGz/NaTR+/pGJHsKDxvIC/TSFYchcjjbBZ6FtY
      rSsa+8YuoIRCt5xMo+DXw3GcqfAHVu+9Wq2Gdq1UKIAwMAstNX5u9T2AbezOCA+zMeinAOKg
      zwb0EXZ2uBH+wOrsIs2uHwCWuwxGRW4UAMVMoDs99EF+ydJEXp6BVaVaszwXPWbW7qCtC+j7
      wK3bzOo8Zp8PWn86kTsFAKzfUIKRDfLginO6B7NkSfr3PNx/UMI0xvRKwE7xDjK5VABW1ULZ
      w2d4Ic5QTib8/eEmUZS999bk0jxmlhUjCDQT3fi3sK/BWIvX4pGsD4OTyxkA4N2XyGAA6TMY
      Bmns+nlfzY41egAGfTHdjlwpAEEQIEkSFEVBv99nZXozRhpeUDPhH9U6kqIoloJp0ASWn8gX
      u/5hi7/uyJULiOd5FItFlMvl3CQUDRJpsrwpfjLbvaB3Nw2ygArz3q3GURrHV9LkagbQ6XQg
      iiJEUUTS2c2MbGJ0HYYhmPTnsbJ03ca85xV9Hk/Qcu5WvzOX8HpyJyXr9XrSTWBknLAFsdt4
      diaYggtnqwhA/d9YP79FrlxADEZQggp/llGeHCx6yDtMATAYIeFmAyM7mGCKh7RFeiUJUwCM
      1JBVa9ksb4BizElxOg8TTP4xzt68RAkNKkwBMFJD1l5KKvjdtNutcPdyTsZ6jEI/q0ZFXDAF
      wMg9VKBGvdtUWMfS45kiCA5TAPYwBcAYCKJQAG6FS5DyvkwBeMftc2F9m8MwUAYjLtzsRmUm
      /M0qU+pLRjPix+te5nmBKQBGaohquh72ee1KOFhd2+lYtjFRssS5N3maYAqAkRqiegGjKDPg
      xp3kNafAzdaHDGfcCnOrvh2kZLHBmeswGBmCCf9oYdFCq7AZAIPhgSjdBEzoByfIQv8guoGY
      AmAwXDJowiFLeBX8rAT3KkwBMBgRMWjCJCn8WP1sq9hVmAJgMN5EL0jMrMFBdBHkFaYAVmEK
      gBELbmqxD/KLyPAPU8ruMM6UOI5jUUAMb/h92ejgsytvkKYXmSmjbBAk3NPLOfKIoihsBsDw
      BhXkXrIls/SCMcGfLoyuGj/+fv1uY1abxOiPzTv62ThTAAxfeEmWyYoCiHsXMIY9xjUZ+m8U
      42kQlIBRCaqqylxAg4TeBRNn7Xmv2bBproKZV+GQRqzGAHsGwdD3H1MAA4heAQSpVOkWQgg4
      jvOsCNKqBNyQ9fYnjV3fue1XoyERdumOLGK8P+YCYviqfeLnO/opKP2+cQcnfVG0uAujuYlU
      SvJ8g4xfhep2nA5SBVA9TAEwPAkqjuMCRQLZXVf/u1V55CiFqZdQVa8bkDMl4A2v/WwHrd5q
      xyAVgNPDFAADgDdB5Xfx1yoCIw2uEqOrgCmB5AmqBFh/m6M3sJgCGDDsoijCtoLcvrheFUoU
      L7ZRAZi5qPQwJRAPXoU/deVkIdckCYzvP1MAA4TZDlRxCiTqPnLzEsbpk3USFmGuCZidy6kE
      xSBiHCdmY9cO2o/6IAdWymN93zEFMIAkKWSsXkz9v3HDhILzjCfOduixapOX2aVZMhljFaYA
      GLFh9uJ5tezCJu5rul1fiKMd+n+TxstakBchbqYA6PWM14+y76nBkwYlqyf3sU8cx0GSJIii
      GNs1CSHo9Xra9QVBgCCkV9fqQzPDFAjG2P+4E9DcEKQtaboPtxiTAY2fJYXdtRVFcZ0cmKZ7
      MmtDWvqYvpe5VwDtdhv/9E//hKeeego8z3v+frfbxcLCgmef9M9//nMsLCxAVVX86Ec/whtv
      vOH52nERlQIA3koCs7t2UiRxbSd3RpRtcvN8k5gRGa1jOmaoAWGXG2J2PnpOK6WRtBWeJnKv
      AM6ePYuRkRFMT0+j3+8DAERR1GYEgiBAFEVt0PE8v8Zqn5ubw2uvvaYdR38EQQDP8+B5HoIg
      gBACnufXTTE5jsOHP/xhjI+Pa9ejg9uPQgqbdVPCAU2IiQM3vmy9hR4maZl5WQlovfC3E856
      hWF3jBPG60WtENKgcMzakF6/RAhwHIczZ87g7W9/O1555RXMzs5i27ZteOWVV8DzPA4ePIhL
      ly7h+eefxwc+8AGcOHECx48fhyRJGBkZweHDh/HUU0+h1WphYWEB119/PXq9HlZWVtDr9bCw
      sID3v//9ePzxx0EIQbPZxK233oodO3ZobVAUBY8//jhuueUWDA8P4/HHH0er1UKn08H+/ftx
      5MgRyLKcSP/EKRScwk+TwK5NbgSR12sZz2fX//SzsBRyGoQ/xe1Cr9XxYRGXUA4zyMEqMspL
      WwYmDLTb7aJWq2Hr1q2o1WqYmJjAjh070Ol0NJ+8qqpoNpsAgOPHj+N973sfxsfH0Ww2USwW
      8a53vQuTk5N43/veB1VV8fLLL+Ps2bPYv38/rr/+ehQKBXz4wx9GsVjEmTNn8Otf/xp79uxZ
      045Op6MtMr3nPe/B8PAwarUavv/97+Oaa67JZfSLMbTRDUn0g9kiYdjtCBLJEsbiZBz1ntzC
      3C/BMLoL/RoI9DnkWgHMzMyAEILXXnsN9XodU1NTuO222yyPv+qqq3D06FGMj4/jqquuwrZt
      2zTXkCzLmqU+NjaG6667Dv1+H91uFy+88AIajQYURdHcTGYoioJTp05hbm4OhBDtnHEuEDtZ
      /UEFjtX53URuJO2Tj0owBQljjDo6JS0Yw4KNz8XoKkqLSytOorjf3Dp8OY7D1NQUtm7dil6v
      B0mSIEnSmsVY/UAjhODw4cP4+Mc/jmuuuQZPPfUUOp0OgLUhXABQrVYhy7KmXIaGhnDnnXfi
      xhtvtH1ZL168iPPnz+MDH/gA7rjjDpRKpahu3xKn7Fa/wsar79q4uJckfu5bv1Cp/zGexynx
      yw2DGKlknJV5rSabB/SBGXTNxEtElBtyOwNQFAWzs7O477771izOnjlzBiMjI3jxxRehqiou
      XLigdebjjz+O7du3r06N3lzkHR0dxdmzZ3H8+HHs2rVrzTVUVYUoijh37hxKpRLOnj1r2yZJ
      krC8vKzNAqiCiZuw3R5uBZqZLzRviTl6C5X+biTN95sWIWvWf2lpmxlhzNSscjPM3i+98RTk
      umR2dlYN4oKQJAkcx6Hf79u6P5JgcXER4+PjmutGlmXUajVs2rQJv/vd70AIwfbt29FoNDA+
      Po5arYbp6Wmoqordu3ejUCiAEIJLly5hbm4Ou3fv1h5EsVgEsDrTmJychKIo2L59O5rNJjZv
      3ozFxUVUKhUIgoDFxUWMjo6C4zhcvHgRy8vL2LVrF9rtNsbGxhLx0Xr1z9th1n6vC190tkb7
      Na94fdZBlbPX6yUVBWbVTisFQIViWgwIWnE0yAzajeCn0Ofk9ZrGfg6sAARBQLVa1R6ELMvo
      9XrodruJRbcw4sXs5fUqSKamprBt2zYUCoWwmpU6vLp+wlgw9aIAkl6gdWqr1Zhy6lcvNaj8
      EiTT19g2p7Yar+H2XTM7b2B13+/3sbS0hHa7rblOSqUShoaGUj1lY6zFbURKlJmWabDkoiIJ
      4U/PE+f1ghCln9/pvEGvq2+7MbFS/2PEq/B3OsbrOAtlDYCGUrbbbZRKJRQKBfA8j6GhITSb
      TTYTyABOLiG7AcwIl7iFcRqEP8UoDMNql9MMwc1xTriJTgpLcOvzRIx9Rv813pfZ+UN1+CmK
      gkajgXq9DmA143ZkZATVajXMyzBCRj9ojD9mUQd2Fg0lTbHnaSApIevG8k2D8KdjTf97WG4b
      r0EKQfDj/gka1WPVV27OGcmKD03AooiiyJRAwhhfMLvjwnr5jN+PKpTND8a2xNEeN8IhqkS0
      uK7lFSsB6MZd4uUaVrgJ2/WKsYaRXbvM2ualDW5nG1bXiWzJn5ZMoDAlkDyEkDWVIMO0ssww
      nts4sMO08LKC3YJdlAKZnpv+pCWu3smtaDbzjHJ2Gebaiz5XxOy8+udgfC5e1m6csHs/Is0D
      6Pf7WFxcRKFQQKFQ0IqspS1cdBDQh2VGHRGhv6ZZGJ/VtYNET+jXMNxYXl7DVMPEziKP83pp
      xWzmaHyuxmcY5ng2XifMcxoXio3XMx4f5XtKSEylIDqdTmJJT1nDzmIOcr60CAHjy+o0TfVz
      /jCOiZKkr59mnBZJ9Xv+RjleojaY9AmDTgZREIPJyUWU20zgrBKmwKaDy2zqGYY7xsnysroX
      juMimcYzwZp94k7schNpFKU17lbIe7m20c1op1RzWwsoi4Q5wMzcI3Z4FZ5BfaVhuGD0vtOg
      52Ikg537w8+5kojCiQr9uA6zn/SwGUBKcFow9Xse/d/dWDpuX4Sggy/sRCcm/LMJHQfGaqBe
      BLJ+LKVRkDthdr964yZsN6n+XEwBpIgoo0DCVABssZIRNka3oN6NYecuzMsOdnbhqFaL0lb1
      h9y869RQZAogJYQl/OyEuJuBYVY3xSl0UX9+u8+dyKL1xkgOr2PL7ninz6Nem3C7DmE2IzBG
      wBkXzO3Ih/pkrMHoGw8bff6A/lrMgmcEIe7w2KyhzxMww7ieQf9v139MAeQQs8QSwDypxikR
      xypaKOokMgbDCbdjL0/j1EkJ2H3PDOYCGjDM/Kl2oad5eXEY6cfKnWg2u/Qb8WMVTZO1WYbd
      ordVwhz9Xf8dpgAYGnZrB3bfCeJbZTD0uEnAshPYZlFFFCtDJ2tj1M4F5PQd4zFMAeQYL3kA
      QaDRCFZt0K8V2JGllzBrmC0Wph0/C69GpeHW/RN0R6+48ZIXYFb6hPYJUwA5IapYYT/XN8PN
      i8XcTdGQ5dLcbpWAG8HvFBVjNxNI49i0mwUZE0GtciWYAsgRaRykerzMBhjBydPipx6rwATj
      /+2+44U096OfyCm9UmVRQIzYYEI/PuzKG2TpOTgZC26FcxABnlbh74RZeLbRFcRmAIzA6AeZ
      lbshyKbZQPhVUvOMk8DK4qKnVYSa8V6zKqzjwrgOxBQAwzdW4Xl+X0InS8/pGMYqbhQAkO2+
      tLL8zfz8xsRFxlswBZBjkkhfdxufbAaz3oIzCH3o1SevH5NOkVBmSiLq9yhOjPfGFEBOsVr1
      D/P8bj8LYnUZq0QyC84eN9FYWe9DrwLZylVkVi8nD7MjJ/T3xhRAivGyiBelsPdDWC9QVJvH
      5BGnRKA8CTWzooVmOB2jKIqtEkhzBFAYMAWQcrwqgbimq3H6U6kSYD5ce7xmzWYdo9ETZuJj
      3gU/hYWBphirRVYv39MXjwpbEKQx4YyxilkIYB4xywkI8v1Bg80AfKK3tOn/zYpZOX3m5jph
      tVd//TAEadgCxqnGSxTXTJKwlZl+rOWlj8LCzEXK+gkQarUaOp2O1jGKokAQBKiqClmW11gS
      sixrvjdCVgsu8TwPAOuO7ff74Hl+zXn1x1K/Gz2WXpP+GM8LrLoCjOelCzn0PE7n1R9Lz0Pv
      TRCENQk0xvPS78uyrH3XzXnpvehj4em9GHc+0t83APA8v6YPaL/T7xmvb3es3fW9tNXsvPpn
      RJ+v8Rjah7TdtJ8URcH8/Dw6nQ7K5fK68WV8Jsbz2T0/N9e2GuN2x9JnRK9pday+b43H7tmz
      B2Ey6ALNah3MyjXqJuzY6bisIxQKBYiiuOaPxo7U/663MqjgMYuxNftdL7T01zI7r/GaxvOY
      PSCr85q1yet57dpndqzTNamAs3LxOM0g/F7f7BpO9+W3DWb3bvXZ+Pi4pmyM19DPWIztCeOZ
      RHWs1WeEEExMTIDhH6PiNhsfwNryI0as/k4/o1g9/zwgSJIEQWCeoEHFjTsoacsyb9YYx3Gh
      7WWbt75xg9Fw0Y9Po8D342az61P9+5KH/YiZ5Gc4YmcpxUEeBVsUCsD4nPLYbwDWWfhevmc2
      O6DkQaB7hSmAAcWN5c+IDje5DYQQCIKAQqEAQgh6vR7a7fa6YwDrEMi8KwG3Y9jogtP/3ek6
      Xv6eNZgCYLgi6VlAHrHqU57nIYoiJEkCz/PaMb1eb92xXoRZnnDr4nE7Zq3W4ih5NZiYAmC4
      YhB9zVFiJfwrlQpEUVznjuh2u+us/0HHjRLwowDcfCcv78DgOb0YAPwt7ObRAruiJesAACAA
      SURBVEoKK3+zmfCXZRnNZlP73WiNxm2d0uulYTwECVBw+13jveZF+ANsBjDQhGlBMbxh1edm
      f2+1WmvWDIxRLkkIfz1JjxH94q6fvrBrv9k5jWHJTudIM2wGMODYWUH6EDtjuB0jGrrd7jqB
      Y+b7V1XVctevqJ5VWqx+K/zcc9B+irJPOAIIvRr4fh1RvXZsBsAwnQkwYR8tVn3bbrchiqK2
      +Nvr9XyFOg4q+jDPNJ/TzTX52RdAXvp7gBPBXf959MeuCL0dTAEwAKzPbh1kIRIHdi6gWq0G
      nuchCAK63a7teeIUTlnIMYhC+Ov/pdeIek2AgwLy238DufgiAAKM7AK36SqtRExYMAXA0EjC
      0hlk7EoU9Pt99Pt92+8bM2DjUNxpFfxJEkWItAoCdWQXCF+AyglQh3dF8m4yBTDAmC1mRQkt
      bMdYJUj0iv5fprTNidOg0RdP1P/r+3wqQK74KDC0DeAEKDtviWRjJKYABhhjKGGUEEIwNDQE
      WZbRbrcdrdu8E6TsgD7ihRAykCUMnDCWfYgLrwYVreJrBhE2QD3wodX/A+Bt7sWvYcUUwAAT
      5wuiqqvlxSVJgiiK6Pf7aLVaA6sIwrDmjIXPmHtm/SJ4WGPcKtoqDPRViPWzOlpann5OS4rT
      Y8yqCXuFKQCGRtSCpNfrQRRFEEK0f2u1GnNhBCSvSUppIyolcOHCBXzve9/D3Xffjf379wMA
      Xn31VRw7dgz9fh+f+tSncPToUczPz2N4eBif+MQn0Ov18Ld/+7f40Ic+hCuuuML3tZkCGHCM
      fuQoBUi329WmqklN0fOCWd8x4Z9NCCHYu3cvGo0GgNV38Sc/+Qm++MUv4uWXX8azzz6L22+/
      HaVSCV/72tegqip+8YtfoFQqoVarBbo2UwADjFVoW1SChE5rGUxYZw2zBfewon+2bduGTZs2
      rfnb4cOH8eCDD6LZbOLgwYMQBAEPPvgg7rzzTiwsLODll1/GkSNH0Gq1Al2bKQAGACaQ4sZu
      pypGdgj7Gaqqim63i9tvvx1XXnklfvWrX2HXrl34zne+g3vvvRd79+7Fyy+/DJ7n8eSTT6JY
      LOK2227zfT2mABgAwlEA1LfvNXt1UGHCP1s4zQKsouqc1taOHTuGX/7yl1oG+PPPP49bbrkF
      v/jFLwAAd911F370ox/hiSeewPDwMD72sY/h2muvxalTpwIHE5DZ2VmVbQnJCANCCIaHh6Gq
      KtrttmMW66DCcRxOnjyJgwcPBjqP/uVn2dvmhF2rJ8j5zBQBx3HgeV77/ezZs1BVFbt370a7
      3UaxWHR8rkFcq0zyM0KDTl9LpRJKpRJTADaEIZTYInr8BEm+M/sOLepH2blzp/b3QqEQeQE+
      pgAYodJqtbTYZUa0sEzgbKJ/XrIs2yZxhT2z4zgOWFqGWq+DjIwwBcAIn0ajsWZay4gO5vaJ
      H2MNJv2/+mPM/u73OmHAEQL5V8+g8+9HodTr4MbGmAJghA8L93QmzBkSUwLJoffrG9dk6L9W
      SiJOCCHAhRm0/um7QKcDAFAuXGAbwjAYSWC1mQsjH5jtrZGkoiaEoP/b05rwpzAFwGAkBLPc
      3WO1NWOaCPI8wxgLdgvGqqqCjAyv+ztTAAxGQqRNgKUd/Wb0dAbl1IdxKllamdWqwqfVLCDM
      GYLVVqGqqkK46ioIVxzSX5itATAYSZC0SyBr6Etg542orX+KUpBQ+uxn0D32NJSZi+Av28MU
      AIORBHkUZFGTh7wHs3uwyub1ohiMdb2sknvJ8DCKH7zrreNcX4HBYDASRC88oypdrq9Sa6Vs
      giqiqBSZvk/sosz0fcgUAIORAMz94w8/4bNhClyzHIA00u128fWvfx3FYhHXXXcdbrzxRgCr
      iWff+c53sG3bNlx11VVMATAYScCqgcaH0T1i9ZnZ78bPwhD+cSiObreLfr+P+++/H2NjY9p1
      T548CUVRMD8/jx//+McsCojBSIqgwl8fFcOwxyrSRv9341aSxqJtYSlrp/OEESAgiiI2bdqE
      73znO/i3f/s3AKtlWh599FHceuut6HQ6WF5eZgqAwUgKJ8FtDHs0/ug/Z0rAHdQ/nmQUlptw
      0DDadv/99+PTn/40Tp06hV6vh4WFBRBC8MQTT+DFF19crTTKykEzGPHCcRxOnTqFAwcO2B7n
      R7Cz8NJVwtrdjm68bjxP0Dr8Zs82zGdXr9fx0EMPAQCOHDmC8+fP493vfje2bNmClZUV/PrX
      v2ZrAAxGUgQVIAxnjOssfoRrnMo0zDWhDRs24Itf/CJkWdYWwTdv3gwAGB4exh133AGAlYNm
      MFJLHuLe04C+GJsXZWA3i0h7JBA1MGhV3ptuusl01sEUAIORYpgSsEdv5RsXca02YPFiZVsd
      bxdZ5Pa8UWK3x4AepgAYjARwK4SsjmNKYRW7fgiqPKPsY9o2s+S2OGEKgOEbZp36x0u/mQkG
      1u/p6AO/MwHjjCWpe2EKgOEZnudRLBbB87w2Be92u2wPYI8EWfQzU74sAsgdbv3/bvszqCBP
      8rkxBcDwhCAIGBoaWpeSL4oiCCHoGDacYJgTNLHIyS/N8I9xsTTP/coUAMMTpVLJtB4LIQTl
      chk8z6Pb7UJVVdcLUYNIGH2TZ8HkBrvNT+wKufm5Rlx9HXd0EVMADE/0+32Iomj6GSEEhUIB
      hUIBqqqiXq+zvYEtGHThHZSoBKTTzmNxPDc3FUnDgpWCYHii1Wqh3W5bfk4HL8dxKBQKMbaM
      wXDGToA7bakYh0DWXyOOtQGmABieaTabrhZ8JUnSElEYa/FT1phhTVwzqrijdZgCYKQSt9ER
      pVIphtZkD1YKIhh+rGS/1r9bwhLWcRb5Y2sADF+4FWCiKGquoF6vxwSfDrYfgH/sSjpYLaRa
      Leh6FbTGBK4ohHRcMw02A2D4otVquRqkNDqoXC6zNQEDTPj7x8nyt/pcX1o7DCGbhmS0IDAF
      wPAFfZHcQF9GtibAiBOzTV30GKN73LqT8rQHA3MBMXzj1YJVFAVDQ0NQFAWdTodlDjMix2mM
      mrnh3Aj2PAh/gCkARgC8KoBOpwNRFNHtdlmSGCN2wqgOmjeYAmD4ws9Lw/M8Go1GBK3JHiwM
      NHrcWulhKAGnzebTChuFDF8Ui0XPg7xYLIJtP7oKmwG5x8rn7uSHN4ZT2iV5mf3fbzuzBFMA
      DM/Qcg9eIYSgUqkw6xeslLZbnAR40LLaXs9j1QavzzItyoKZYwzP0MqfXpFlmeUBvMmg+57D
      xG1f2hVa8yKQwxrDaRgDTAEkTJK7AfmBEOI7lLPb7aLVaoXcomzCwmGdcSuU3QhSfeJYEMvb
      qVqnl1BS+m+S7z5TAAmS1brjftvJrP+3YH1hjZXgd3LheCkJEZX7xYvwTwPMGZsS0uITdEJV
      VfR6PV/fLRQKzP/P8IS+uqxx5y3j4q3b98fsfH7aZPZ3O9L4jrO3MSGc6o6nGbtdvxRFQbPZ
      NLVwrXYTG1Sy8ryTxs2eyG5dQF6+Y7yeWeaw1e9uz5M07E1keMZqQxgA2k5gVkJeEARUKpWo
      mpYpsuLyixsnAWm1F7Lb/qRCWG+kuN0LwKqOkJWSchL4SY8BpgASIuhmDxzHYXh4GOVyOdbY
      ekIIisXiur/Tl4MuEtsNekEQWD4A2AzADDfC384SD3Idt9FBxoVgq+qidsI/yY3ggdWZ+sLC
      AlMASRJkEIiiCEEQUCwWUa1WTYVyVJglMamqina7rS2w2bmJ6NaRg07S1l/acOMeof57+hOW
      8Df7zEr4u3lv3SxiJ/n8JyYmoKoqUwBJox9MXgZEp9NBs9nU9twtFouxhBaqqrquiBsV/p1O
      B6qqQpIkNJtN28Viv7kEeYGtg6wnycgcfRvsrHej39/qHPpj3KxhxEm/30ej0cD4+DhTAGnA
      70yg3W5jZWUFKysraLVakCQpgtatp9vtrrOUer0eVHV1I3ie58FxnK0SSHoKnDSsFMR69IZQ
      0EgdPXph7javwK0F73VxOQ1jfm5uDrt27YKqqiwPIC0EGRiyLMcqUBRFQbvd1uoB6RfFaDtK
      pRIajQa63e66RWM6a0nDy5AEhBDUajXMz88n3RSGDjfuJ6/nsbP+4x7/qqri0qVLqFQq2LRp
      E1MADP+0Wi0t2sdsq0cq5LvdLniehyAI4DhOywbmeR5DQ0OQZRn9fh+9Xm+grOKsZYBnhTCy
      fIPiJyQ1DjiOw+7du1EoFLR+YgqA4RuzDV2oG4gKc1VV0Ww2AayWP6B/7/f7aLVa2mL2IJWK
      VlUVo6OjGB8fT7opuSJIdrWbBWirHcWc9hj2st4TVpSTW5gCYIQOtf6NyLK8Rgl0u11NiSQd
      FspxXKxJOvRabAYQDnEuqpplIRvXL/w+1ziFP8AUACMmCCEolUoQRXHNDIFipTTioFAooFQq
      aYvZbje8DwoT/ukhaCZvWDW9aBh1XEESTAEwQsNsqksIgSiK2obwNLojLf7+SqUCSZK0l422
      sdlsRq4E2AzAG26yaml/JlVsL+jz9BMSHgSmABihUCwWTZO7zIp4pakSplnuBL2PKNckwgpx
      HCTcCv+kYuzjWkQOE6YAGKHA87xjIpqiKOh0Oqmx/gGgVqtpyks/gykUCuh2u74rnzqRJiWY
      B/TCPyoFEFaYaJqIVAHQ8gTdbpcN+AGFFoejwjRNwh9YbV+r1UK/38fQ0FAmX+K84ORHN4u2
      sTo2bNwoliy69CJTAIVCAeVyWft/rVZjSiDHWCW8tFotrUREmqGLv6VSKXE/8qDiVQHEJWzT
      VsI5TCJTAPrsT57nIUkS2u12VJdjJIz+ZdTH+mfpmbfbbciyjGKxCEEQIn3p9dEejPCiaOLG
      TW2gNBPLGoCiKKZJQ4z8IMsyBEGALMuo1+sAslnuuNfrodfrQRTFSGcATPivxWys0P73Wuvf
      Co7jPD/TNJd0DoPIFECj0dAWBtMW+cEIn2azqbl68vCso1r81cOUwHqiFKq0v439bhTwbgvH
      5eHZRaYAVFVFrVaDJEmJJvkw4iNtC7xphoWBrhe0cVrUVgvKefb3mxGpC4hWjWQwsk6lUtFc
      CK1WK/AsJw+zpCA4CVq/SoFa+E7n9EvelDbbDyAF9Pt9x4FFLUZafTNvAzHN0ExmURTX5Qsw
      0oV+HwG3pR28nDtorZ+0wUZygiiKguPHj+PMmTOYn5/XCpIZN8TgeR5vvPEGGo0GFEXBxMRE
      rgZh2tELCUVRmKsrBIxbO5q5xIKMceM7ZJaNTvexcMowDrL9ZNphmcAJQhdNL7/8chQKBSws
      LODChQvgeR579uxBo9HA0NAQVlZWMDU1BY7jcPDgQbTbbRw/fhzDw8Pazj6M6NC7aziOQ6FQ
      COzaZLMIe8IUtnYLvmbHDtL7xEZhglQqFWzduhUnTpzA+fPnce7cORw+fBjFYhHz8/Nahmq3
      28X27duxb98+VKtVFAoFXHXVVVhZWcmlVZI2FEVBs9nUFEGpVAoswAd9DSAJBkmwu4UpgASh
      +/ju3LkTly5dgiRJWF5eRrvd1jZWpzH1PM9rZZSZ+yd+Op0OVlZW0Ol0AIRjoTKBlE7y5ue3
      g7mAEkQURW1f2IMHDwIApqensXHjRoyPj6PdbkNVVYyNjaFQKGB6ehqyLGPLli3gOA5bt25l
      QiRGFEVBo9EIraDdIAiYtOB1sXdQILOzs2rSuzENMsYStvrfjb5Ls9+ZAsgeHMfh5MmTmtJn
      RM+gxfe7hUn+mDFuPWiVhej0GeBtcYuRLtjzYqQBtgYQI4QQnDp1CktLS9rv+n/1IWsrKytr
      fjeGtU1MTABYdRnpd9piMBgMt7AZQIx0Oh10Oh3MzMxg48aNuHDhArZv346ZmRls2LAB09PT
      WoTJ5OQkdu/erW2yUiqVsLS0BFmWsWPHDjQaDa3WPs/zeP3117XPnDZmYSQPU9bxEsaMK6sV
      S+1gozBG5ufnsWnTJrRaLciyjLm5Oaiqirm5OczPz6PX66FUKqFaraJUKmFsbAwzMzPodDqo
      VCoQBAHdbhczMzMAVgfk8vIyCCHaZxcvXkz4LhluYMlk8RGW8Nf/5CWMlymAmCCEaNm8hBAs
      LCxAURT0ej2oqoqtW7eiWq1icnJS20Cd/rtz5060Wi0sLy+jVCqtG3y1Wg3Ly8soFotMsGQE
      toAfLXpBHbSfzRaQ8zIDYC6gGBkbG8PevXvRbDaxuLgISZIwNTWF4eFh1Ot11Go1DA8PQxAE
      8DyPixcvYnR0FIQQiKIIWZbR7/dRrVa19PSRkRHtM1mWUa1WE7s/4wI3wxpWCjoawh5/VufL
      y7NjYaAxQRdxFUXR/m8M/aSf6YUD/V1fI4hiDAVNeivDUqkEURS17GVWBtwcjuNw6tQpHDhw
      IOmm5IoojA+rcxrXcOLcnzhMmOSPCWPop1W4pzE81PiZl7DRuJFlGaVSCYIgQJIk1Ot1pgQs
      yIsPOS3EPfPUG2lZdhGxNQBGaNCN1VVVBcdxa/aFzjKiKLKonRQThvDXL/DqsSoJYWfMJW2I
      eYGNakZoqKqKVqulbacoSVJmLCErBEHA0NAQhoaGQj93lgRFWglb+HtRAmEsMCcNUwCM0KGR
      SDzPo1gsZloJFAoFLcy2WCyGeu4s90saCMvadsq4zzNsDYAROnq/P10YprMCRVG0ippph+M4
      SJKk/R52sASLBEoHbkJy8xq2yxRAjOgtFmMZiDxhzEUQBEETnlToZWGv6LAtfiN5fPZxEZX1
      r//7INTaYi6ghMjaYpEXjBuo6CGEoFQqRS5cg0DbSN0/lDCfF1tU9k9Yfn+7LSH1iWR6X7+b
      mltZUuxsBpAgWRooXmm325bRM1TA0uPSBMdxWtkN4/PpdruhXYdlbPsnSsvf6Ri7dzaLs3qm
      AGImr75EI9RSsvJzp1EJCIKASqViWkyv3+9r6xhhkCUhkTRWpdOTwqodWXymbB4aI8bSzlkc
      MG5RVRW1Ws02EYxG16QBnucxNDRkWUk1bIs9zy7AMLEKzQxK2O9iVt9lpgASIO/Cn6IoimM2
      sCAIqfCHF4tF23aE/bzoHg4Ma6JUkkGEv9s8gSyQ/JvHyDWqqqLRaFiWPuA4LvEFYTdZy2G/
      4HlIIhpEzFyaWRX+qqoyBcCIHlmWtRIRZhQKhTXx9nHjJlktipc8q4Ijb3iZaeTNdccUACMW
      Op2OpSuILggnIRAJIa5KVrDibfkg7DWFrCtxpgAYsWGVGwAk5xN3e10Wthk9TjV5wj6//u9m
      uFkjyPpsgCkARmzIsmwbS5/EXsZ0Ix0nwgwBZZgTh/A3/s0OvQLgOM5SEWR1dkgIYQqAES92
      YZ9JKABVVVGv17WtOc1QFCWSGUDWrccwiaov7BQKzfR1S5ajfaxgCiCD8DyfitBJr9CtLq1I
      QgEAqwLeKhmNlrgOW0DZWZRZo1wu+/qevtxCFAogyGzCy7PJ8nPMnhQZYAghqFQqGB4eRqVS
      Sbo5nun3+7YWV5IvEt3GUlGUNe3sdDqRVC/NUxionyguo3DWu1msNmChdXni6DursahvXx4S
      Ok3n41bTJT1Zv/GsQYW/JElQVRXdbleLnglj/11RFCGKYiTWrp5ut6uVgDBrA8/ziSy40nwF
      juOgKIpWxrrVakV2zTy9P0FnpMY9sPWkLfQyL7JPVdVVBeDFD6Z/EHnohKygr6tPFQCwan0V
      CgXHsgtOUCuOujzChLax2+3argFQJVer1RJ74em7QGcEUfqm84BdATSz8udWxyqKsmaPXbNz
      OGF1Pa8Mglyj/SR4GYjGh0FflixWwcsaPM+j1Wqt8VVTa4lm09brdd/np+eKYhN3mj3pxldM
      S0M4zQLCeNHtiDrqJ6n1jrAhhFhGd+mteTdhl14sf6fNdIIo2DzKMauCeoLXlXDjCY1/Y8og
      GprN5jqhqKoqZFnWShlQK9v4bGhVTruXotfrgRASiQKgLqpSqeQq6WoQxk5WQweNKIpiO2Pz
      W/02bW6fPGCmhAOVYjRzB+k1TVK+sqitwySwsoh7vZ5Wu75cLqNYLGrChU6reZ5fE81CF9L0
      tNvtSF0edJMYURQdnwvP846KyMkCzAJ5uAfA3toOu/y5mUwJs1x0Hp6HHUbFGkotXjcDOQyh
      7OUc9EazGC7phXa7rVnXdBHVyr1QrVahqiqazaZpZIteKXAcB47jQp0R0IVWusG6XaSF03my
      Tl4WEtMCK+3gjnUuoCQvbvWZlZb3shiUJ6xcO5R+v6/twOVGSbpxPxSLRRQKBc2/2+v1QonO
      6fV66PV667Zb1OOktI2zzCxCx3NW2+8FP7OAQdk4KUkIIfEpAC/TtCgXeLJGsVjU9qet1+uW
      wrvX66Fer2uznnK5bBmZ4daqpxu2CIIARVHQarUcY+LdvLis8NoqgyD8gbUGXRS+fbPoITef
      WR2bZ4xrtKEoAGOIl1vtbbSC9OcJyzrKqpXF8zxEUdSqZAqCgGq1qpUloJa0Hpob4FTb3g3N
      ZhMcx2kJPhzHaTkHVs9WkiQtWskOOwu/3+/bKhmzSJEsPl+Gd7z6/r3IIrPz5w0zz4rg1Rfp
      lBBmJcxp+QIzC9RsSu92EdnKys0yhUJBE/x0ACuKAo7jNMUgiiKWl5fXfI/neW1PWzv/eqVS
      cQwZ5ThuXcy+LMu2fSsIgqvkKbtsz2az6dpVmGXyvjZlhZfnZxTeccwi8orV/Ql2H3o5EcXM
      IhMEAUNDQ5oCkGUZzWbTtACXMVTJaZs+s/bYaf0sRAjplWWv19Nq6VcqFQiCsEY56u+zUCg4
      7rFLZwiFQsHW0i4UCmv6XlVV20qe9NxuXkyrZ0oXtK3Ii/AHBsfNRXGT2xEUN0EFeRpDYRD6
      GoBewFJrVb/fKiGrNT+q1Sq63S5arZZt0o3fKb6b6WJalQCN4pFlGbVaTfs7LVVACMHQ0BAE
      QTDtOzrLouGhRghZLSHR7/ctX0q68CsIAsrlsqaMnNrtRrAZcwFUVUWn04m07EIaGST3VbVa
      xcrKim8lYPQy2Pn77b5Pv8sUwSoCdStQi5Jan/qOMvuhGP+vtzCtBBDw1k5MgiBoUSxUwIT5
      cKwedlpnAjzPa1a+0eLWx+93u911lrR+faDZbGp5AWZwHGdbdoG+qIqiaBm8Tn0ly7KWyWu3
      8Yt+lkLzE6yqcerJ20ubtrEXBZVKRZMtoih6UgBUBrnpJzdRg3ojlB4z6AiSJK2LGPHrEjL6
      7Z00sl7p0Do3rVZrzSBx8gfbDRCnB2ylHJKM0aZWP7XQrWg0Guva2G6317h1nKxxQRAgSZLj
      oivNNnaaxrfbbVSrVduZgHF9otPpuBL+du3LoiDNYpvdon+vut0uCoWCafKh2XeM756Vu9A4
      C/AyDsze+7QahFEjmC32xdkJ9Fp05iFJkuYakmXZVVu8aHL9w7dSekkPhn6/r4V02mE3swHs
      N19xi6qqqNVqrny4+rUdu/NR7Orw551BsT7p+lWpVLIdP1a5HcZ30W04ud27Ybc+OHAKAEiP
      1qPav1AoaNEkYQsIO/cVbYP+b0nNBsIQEP1+31XpBSecrDc9TgvF+vO02+1QFkPz+uISVQZp
      LQJQgOIYFC54eG8cGIW1LMu2UWduo76cggycxlLQ/JQ8EmsmsFuoW4iGNDqFBno9t9OAcxs1
      kPYB0263IcsyyuWyZXmIuO+BbuahKEokG61kBad+5zqXQF75R5DzTwOqAmw9Alz7SSiVrTG1
      MBhe/OxWgRl2EYJRkPb3OQpSqQAohBAUi0UIgoBarRaKtejnIWdZCfR6PdRqNZTLZdNdm+Js
      v35LSLs9eM3Im8vE7n44VQb3woPA6aMg6ptuk5VpcO0l4La/hsKbb6iTNtwoAStXjZcErjBI
      +3scFanPRqHRAyMjI6H4tOk5nX7ckBWhpCgK6vW66UwqzoQkWqLCa0x4XsP2rO6JrJwFXv/F
      W8J/9Whg+lmQhVPxNC4kaNi324AQ+qz1e43og0poMEKSgRp5IvUKgMLzPIaHh1EoFJJuyhqo
      SyMLAkofakuRJMl2P1dBELSs5KB0u13U63X0ej3X9YiMfZunF9/yPrpNQF7vHiNKH+jUM3n/
      duHgVoaX288YzlClagznT7ULyAjHcVoClNO6AK2MqV/5j0pQW0UwRD04qXus2+06Lr5SjG40
      6maz+n6xWNRKT6iqaroxjRfMahh5Re8eyKoQsJt5qcM7QKrbgUtn1v69vAnqhr2ZMDbMcOPW
      cRNCDngrLsl4C2N/ZUoBAG8JLJ7nLatjFotFrd683g9JC425FZZ+iCvTWBRFLUGL53lX90Tz
      LYzYWWc0mY8qmiQ2bNe3xyggsij8AfuIFbU4CvXIZ4Fn/zNIY/bNv22A+rZPQx3aHlcTEyEp
      92vSod9RYLwnswX2zCkA4K11geHhYTQajdWpzJtliwkhmkvD+DBpzgPHcbHEn0cZnmhMlqGJ
      dHboF2H1bbTqC1VVUa/XUSqVIAhCIqUarCz8PL2oRlQVUHa9G9zQdqjTzwBKH9j+Digbr4SK
      7N53mEI7ikXiPIYTG5Nljf2WSQUAvBUqWq1WXVuDdBGJ7k2rd2dE5RqKakBRf7o+rNIOSZJM
      y0I4hWP2+320Wi1tc5goMVv4G1RUEChjB0A2Hlz9PSPrTHHhJczU6zmzDHUtGl1kZp6JzK0B
      GPEjKKjioDVp+v0+ut2upRVM3R+9Xg+SJEEURTQaDdfX0wvmsAWbW1cWIUSLvjH7zAm7onFh
      4ZSUlzeMkS1uj7ci6PMxZshH0fdhW+1xh4qmHV7tgzvzHyCLp6FuvhbKzlthZxYSEuOOYGmE
      lp6gC5xmljAtY01fMFo/x886glW9k6jRl5duNpsQBMFzNFXUL9qg1WbRj4XXX38db7zxBmRZ
      xr59+7Bx40YAwIULFyDLMnbt2oVz587h3Llz2LFjB7Zs2YITJ05AURRIkoSrr77aVxtoWK6q
      rhbkC3P/ZzPCFthM+L8FxxFwr3wX3G/+62ri4MkfgLv5L8Dv++Aa48Do0rlVCQAAIABJREFU
      LclMGGiUELK6ScrQ0BBEUdSEPF1sprOAQqEAnue1Ddj9Evd0nlYJ7XQ6WtllfZp+Wsm728Oo
      3B577DEsLCwAAGZnZ/HEE0/gxz/+MQDgoYceQrlcxj//8z9rhkqr1cK//Mu/+OojuoZmFP5R
      GyduonvcROzleVz4gVP6IFM/XRX+AIjcBV57xDFvgimAN+E4DoVCAcPDwxgZGUG1WtVKUdAf
      2ol0gxu7ctdORBmWakRRFNRqNW0RlxZhoxu+J80gvsx6a3jPnj04fPgwhoeHsXfvXgDA5s2b
      cf/992vJj5Ik4YUXXtCMlSNHjmBxcREf/ehHLct82EH3ea7X65Fb/nqs3hej4NcnhBl/jyr3
      xnj+LKESDiiOrf3b3HmoM+cAWCt2pgB0OGUG0y0Rqd92eHhYq3fuh7iVgP46rVYLKysrqVcA
      WXsR3WIMEPj5z3+Od77zndrM0ixk7+abb4YkSej3++j1epiYmMChQ4csr0Gjw6zWGGgEXZyY
      ufqcBHqc74nZtbOASnj0N90Opf/ms1YBta9CrS3ZyiemADxgTPKi4aiVSiXQeZ0GeFQvQFZc
      LEkKgDiQZRmvvvoqrrnmGgDASy+9hIWFBbzyyis4e/Yszp8/r5XZpgmQTz31FG6++Wbb8iii
      KGJoaGhNpByl0+ms2edB7yqIkqw8Q71iygKKooBcfit6vf1QugKUrghZOgRu9z7beyArKytq
      tVqNsan5QpZlzaUSZnVLMwvQ7LM8LJJ6KfKXhxBRjuNw4sQJHDp0SHMFzczMYMeOHVhcXMRj
      jz2GO++8E2fPnkW/38e2bdsgyzKmp6exfft27NmzBxcuXMCWLVs0BWC2llMsFlEqrRaOW15e
      TnwfYjMlnqRidxtKGme9rCBwhABz01Be/hnAi+DedgfUDZuYAogSqgDoJjZJkHWh6FUwZf1+
      OY7DqVOncODAgXVhoM1mEzzPe47SMlMA1AVECEl04x2nsg1unr/xeYehNOg4clJCWVEAwNp3
      w41yHegw0DDgOA7NZnON9a/f1N0rfuKx8x4yaSQP96t3L+jHCRX8YURnRbHngjFfw2mMuhFC
      bsNDzSx2s2t7VQ52C9P036yMNa8zKqYAQkBV3ypFIYqiFjHUaDQCLbJ6EXRZFop+4sOzfL+U
      NLfdLDHP6jg7ReBFsNP/e3UV+b2uXrA7RSfZHZNlmAIIgUqlYrqANjQ0hHq97lkJ6AWiVyWQ
      x0FqRdZfzDQ/L78KGfD3PMyUgJfrRtGPZkowrc/LL9lxbqUUWlrCNMZWV77ay/moXziKeidp
      oVKphLbBTxZJ+zqGn7bpjRYaRRPn9f2ij/+3C0lN23sYRnTc4L6BMeG21ssgQcNnAe9bQ+aF
      vN5zWPcVV50fMyVltPbN1j3SQNBZF8BmALnDTSajVdalG4sijFhx+v0wZgB5zg9IkrQIObcQ
      QiDLsjazovWvnO6DEAJFUdDr9dYYamaJoDRXguf5WLOnnQjyrJgCiBD9AlkY5/JzbafPvSgB
      ui1nWIlvtCKr2za7OWdWyIKATbKNXp9lo9HA008/DUIIpqen0e12NeFOQ2FpdJ6+rEu/38fJ
      kydx4cIFrKysgOO41aQqnfCn+4jMzMyg3W6j3+9jamoqNbMBpgBShqIoWpkFWm7aD24frN7n
      6iTU3WY3mglUustaUOtHVVWtIJ2xTLWXNhrbatYHaSVLWaZph7qLqtUqzp07p1nzp06dwuuv
      v46lpSWcPn0aoijixRdfhCRJmJycBMdxmgtyx44d2LhxI+bm5jA1NYVTp06hXq/j0qVLqNfr
      eOONNzA5OYnJyUm0223tnDMzM4nfexCYAogAannU6/XA9VaMC8JWGBfgvLp27M5Jy2bzPI9m
      sxlKUhGtq0QL7Vld2w9GhZBGpZD2RWDAm3CJ4l7o2Dcb/2bX27hxI1ZWVtBut9Fut7GysoJK
      pYLZ2VlwHIfp6WmUSiWcP38e5XIZsiyjWq1i9+7dmJiYwPnz53Hx4kVcffXVEAQBS0tLmhFH
      M7Ivv/xylMtljIyM4IorrkCtVgv9vr0Q9D1hCiAi6B4DQRN6vOQAuP27VwqFAsrlcqjlLvQv
      tdlCXNgCJU3Cn5K29pihj5M3i1AzOzas65rV3jLzzdPxw3Ecdu/ejZmZGc3tI4oiNm3ahM2b
      N2vF806fPq3tubCysgJZljE+Po5arYZCoYCFhQW0222USiUsLy9rQl6SJFy6dAn9fl+btaZd
      iTvBooAiwml/3jCxi5gIw0/Z6XTQ6/VCXfiiQkRVVW3DnTis4rS8sHEUXgsDq2dil5UblWKz
      mgWoqqpt81ooFHD48GFIkoQrrrgCjUYDo6OjkCQJhw4dQqlUwhVXXIFSqYRer4dyuawV2Nu/
      fz8URcHs7Cz27NmDkZERdDodlEolVKtVcByHubk5EEKwY8cOcByHnTt3RnKvccFqAUWAoihY
      WlqKvfiWlZUbJAzVWFuE/i0opVIJpVIJiqKg1WrFUkcpLW4XfTG4vJGWMW+G8T0wG8/62UTa
      CdpWVc34nsBphRCCarWqle+N87pmqfRBZwH69QV6HT/Q6AtFUbToH0KItrFOFlwig4DZc3D7
      zPXHxfE8nWYdxjBO/Ri2c8+mJcLHjqDvDFsDiAgq1JKyIsLMJA5z8bRSqaBaraJara5RALR+
      EiM5guSG6DHz0UeN1foArYZ65swZSJKEmZkZrSz27Ozsmp3+lpaWsLy8rMX507bTfII0EkYf
      sxlAROgXz5KybPUKIEyLxszv64R+f2WjsKclM1ZWVrSoHXrutFthfqHjwviM6Gde7ts4vvz0
      WZD8C7/XDBOr69O9sLvdLlZWVtBoNNDr9cDzPObn51Gr1TA6OqqNuUajgfn5eVQqFYyNjWFq
      agqiKGLPnj2pSv6i+O13LcIvzMYw1lIoFFCtVlEsFpNuSqhJVlZhllbwPK/lEFjBcZy2eYn+
      OmGStJDSY2dh+xXgxv4Kc39b/fnNci7MSEN/q6qKTZs24eLFixAEAbIsY3FxEWNjY1p029TU
      lKZ0f/e732HDhg04f/48arUaut0uhoeHU3EvYUJnOkwBRIiZtZtEG/RWZpAkK7uX3ervkiRh
      aGjIcRodtc81rS+wX8Vs9UzMzufm/G7cNnZCP83rN9SSHx0dhSiKaDabKJfLOHPmzDrjjBCC
      Xq+Hbdu2YcOGDRgfH8fExEQqrX8/EELAd7pQfv08+o8+xlxAUUMFH8/zWjJVr9eDLMuQJAmq
      qqLb7YayAYgVxpfar7A1ChrAPgJBEARUKhXbaymKgn6/r03V84aVdW/VJ0FcP3afOT3zKBZv
      06IUCoUCRkZGMDo6qu3Z0ev1MDo6iuXlZWzcuBHFYhGqqmLfvn2YnZ2FJElot9tYXFzEhg0b
      chGkQAhBe6WBl//p3zA3OY2t3RoLA40DKgSosKQDiVpTvV4PjUYjySbaYmel6hWAURkUCgXb
      ukGqqqJWq5lWBA3bt5zEeoJVv/E8j5MnT+LAgQPrPnPbzii30fQTymk8v9O6U9zClEYA6ZPH
      zIwXRVHA8/y69ie9n3IY9GXgX370LJ48/QY6nICy3GUzgDgwy2oE3hqUSbuJgmBcyNTfp9N9
      dbtdy3LQYQvruIR/WBFTXjCb4Rkxm4lE7XJzcifFCRXg+utaCXX9bDzrVj+FEIKZxTqOnV1B
      k5cAADW+wNYAkkQfqlYul5NujiVuhYXRJ+3k989KNqxbvAj/sBZOzcIf3V4/TF++l/WlvAjV
      qOAAcL1e6MK53e2jrerGByFsBpAGCCEolUoghGhp6WnDbU6B3nXjNAOguRJRT6/TqGTM+saL
      8KbHm33Hrb86ioVcJ9ddEjOkLMF1Ouj/8hjkc+fA79sH8eaboPb7UEulQP2mKArGR8vYOT6M
      MxeXABAQlWUCpwZCCIrFInq9XqCN5KPEzM9rBa3i6HS+QqGQ+QgLfXikW4xKz6/lb9YWr4Ii
      bIFszGmI8lp5ghAC+dXX0P7XfwW6PfRefRVctYr+5BQK99/nO1CEPo+Rsog/uP0QnvjVacxd
      WMC25iJTAGmCZhCnVQEYsRNatBqjE/S4LAoGP4Jfj1NEkNP37Nrkh7AX3vXnZDhDAChLS0D3
      zUKSnQ7UZhPS793huh8JIeDUHrjaNFTCQa3ugAzuTSWgYP+2Yez+8BF0ag0Uex2mANJGWtPO
      vUAtezfQdPyszQKMlrY+e1n/rx1pcU2ZzRqclAxd8E/LPeQBFYBwxRXo79kD5Y03wG3fDv7g
      AajVKlSXblK+swju6f8dmH0JhHDArltBbvjv0OdLb67RKJAEgsJYFUCVKYC0kQcFIIqi6/1+
      s+oGMsuJ0P/fSUCmQXAG9cdHMWMYZFRVBbd9G0qf+wyUNxbAbR6HumGD62fEE4B74b+CnP3F
      W+c8fRSkvAnc2z5v+h2mABihYyzp4ETWq4H6zeQN63puF+iN33fK6k5LDH8esQuQIJs3g9u8
      GYB9XxujrojaAy48t/ZcUIFzT4O7/gumwRZMAaSMrFtTXit7KoqCbrebWaHiNdomjOcbJHon
      rCgc5v4JBs0B0ieImkHDa+mMWq+c1z9LDt3CJqysdDDK1SGSNxeNSxstnzlTACmDvlhZFIiE
      kHWbvNsR52YwYWLl/jE7zkr4B9nEwy9uhD/NTTG7VhbHZFpRFAU/+9nPcOrUKXz5y18GsJoY
      +fd///dQFAUzMzP41Kc+hUcffRStVgu///u/D0EQ8L3vfQ9333039u/fv+6cTZnDN1Y+gqml
      FVwtTeLTQ49CKA1DveYBy1Dr7DuccwbP8xgaGkp9drBRgImiiOHhYYii6Or7WRD+1Poy/viN
      /tErAC8hfcaN7aOCGh8cx6FSqayxOq0Sx6zOk7ckvyjYsmXLmj6SJAl//Md/jHvvvRe7d+/G
      hg0b8LnPfQ5HjhzBxMQECCHYu3ev6SZThBBMXFjGr2c4vKGM4ljnWpzf/YdQ3/c/Q97yNutS
      LpHdHcOSfr9vmwkqSRKGh4ddR9LEDVVS5XIZlUoFw8PDnoV/u91OvfDXC3qrH7cYhaGfWV5Q
      4e/2+3R/5kqlAkmSQrk2Yy0cx+HgwYPrgiUURcG///u/4+6778bw8DCOHTuGU6dO4dZbb8W2
      bdu0zezN2FAtoiitGo5DlTKqN30W/Y1X2iRaskzgRHCKkKFZtOVyGaqqpi4voFQqgeM4rca/
      F0svCeHvJ1rFKPzDaodZIl3UlrKfe+h2uygWi5auKuO9MILR6/XAcRxWVlbQbrexZcsWnDp1
      CmfOnMHnPvc5R+NKVVVsGyvjzz5yPU5PX8LhvZswUpHWCX/9mJuaXWEKIM3oN0lJgxKgIZui
      KPqa4iuKgk6ng1arFbtFacxOdZtMFabw12P0s0cZcWM327T6vdvtBirTwUo+2NNsNvHQQw9h
      cnISP/zhD9Hv93HrrbdicnISd955JwBgYmICy8vL+OY3v4nbbrsNb7zxBo4dOwZRFDEyMoKd
      O3euOaeqKLhi1yiu3L1Bc18a0Z4J4fDUy1OsHHSaoS+RLMtoNBqJxcpTtxQV/n4tv36/r237
      mCRuFIAfN4/bawuCsK4cdJilHezO4Tf72GxB2+xcTOi7Q2/Ry7KMZ555Brfccoun5yLLsud3
      STue8PgvP/w1mwGkGX2Fx3K5jHq9Hqvw5DgOkiRBkqRQNrnv9XqJC3/A2eo2D7HLBnaumSCh
      m1Ylv/Wf0c8ZzujfA0IIbr75Zs9jLkhfE6Li6svGmQLIAoQQiKKISqWCer0ey0tGI0GoxR/U
      36uqaqqyfZPKYo3L328UymE8Qzezh6yGMMdNlDsA2qEZN4qCm67awRRAVqBumKGhociVAC1P
      LUlSaAKr2+2mcsvHsPoxbQuiZjH8ZpU5jcrBaJka/+/GdWaGPr+FKYj4MT4/VVVRklgiWKag
      SkCSpMiEqSAIKJfLWvhfWJjFLidNmMLfiwKYmJjA0tKSqYCNAisXjT7SyWr9wU37nPIi9P3D
      hH/8cBxnmVfEFABDo1wu24b+BSGPL75ft4osy5ifn8fJkychSRI4jsPw8DCKxSIqlYqjJQ1Y
      96c+OsvqmCAJbH7Ol8dnnzWWlpZw4sQJFAoFHDlyBABw/vx5pgCySBQvVKFQiEz4W+37myX8
      CHsrC5oQgve+971a3Pf09DQWFxfRarVw9dVXo1wuo1QqQZblNWsVy8vLaLVaWF5exr59+yCK
      IprNJkqlElqtFko8D/XMGcgXZ8Ft2gTuwH4oHmdyZvcYRf0iRrycOnUKPM/j2LFj2LhxI3bv
      3g2AzQAySdgLSISQyIR/p9NBo9FwLQDytIhopwBoEt34+Di2bt2qWf3PPfeclgh4+PBh8DwP
      juNw4sQJbZawYcMGnDlzBrIso1aroVwuY8umTRBefgW1n/0CSx0FwyLB6K03QfzQXVB003+z
      2UFcrqi0QktX2IX+EkLAEYC0FgFCoBY3QFGzo9huvPFGXLhwAa1WC2NjYyCEYNeuXUwBZBGO
      40JVAl7q93vFS6yyIAgolUqpWTCOShkZz6l/ljfeeCMEQcD09DQmJibQ7/exfft2zM/P49Ch
      Q5qA3rx5MxRF0ZQ2WbyEyedexj+Wr8TsyBDG+i187IXXcOiGt4Ns27ZO4Lv17zvdQ9YVBsdx
      OHV+Cb86cQEEBLdcvR0Hto+sWwznu0vgXvgGcPEFAATYcSPI2z4DWaxmQgnMzMzgoYcewic+
      8QnQvC9VZXsCZw5CCKrVKlZWVkIJq6QRP1G9yF7OK0kSeJ5HsVhEv99PLFSO4nfhMmikS7/f
      x5YtW7BlyxYcP34ci4uLeNvb3mYa2qkJ4m4Hjwrb8Dt+I0AIakIR/0pk7O90YFz+CzOxLKwQ
      0yQghMNLZ97A//2vL6HdXR1rz5ycwX+65224avdbG7HwRAV37H9du9HKyjlwnRWot/2PkOX0
      K4CHH34Y11xzDS5evIhyuYxz587h0KFDrBhcFqFT1jCI0voHVgvHuRUOtB12UQtx47ayJRWK
      xk066DnsfgdW71msnwN/4rsQXv0O+MXfggA4cOAA9u/fD6dsfTI6iuWRcUB37pXqGMjGTa6i
      c9ySpzBOwhE88vSEJvwBoNnp45GnJ9a8X2T5dZCzT639LgBM/Qxc7UJMrQ3GXXfdpRWSm56e
      xpkzZ8BxHJsBZJUwBCQtOBel9eZVUdH7KhaLkGU58VmAF6wEv1n8vR6O48CfPwby9P8G0pxf
      /WNhGNwNf4LCvrugKC42nSmVcMsNBzDx5O/QV1RwBLj5+svBDQ1BUZV1fv4gzzxPIZ3LtfVF
      CVcanbXPrrOM1R17DagK0F0BylsjbuVbGKO83LpXDx48qP2/Xq9rlUiZAsgoQa32QqGASqUS
      +R7EXhZ/9bMFnudRKBRSmT9ghpVQdCNoObkF8tzX3hL+AEhnBXju/wK/40Yo0gbHcyiKgndd
      fxmGhiv47fQSLts6jHcc3IzJqUnMzs7iqquucpxFuMFpwdjP/SeGquLazWX8R31tocW37du8
      thrs6D6oxVGQ9tLa75c3Qh3ZE2kTeY6D2mgAnQ7Q7aH/6qvon5kE4Qj4AwcgXH8E6puhw1YY
      Z6XFYhHAqquRKYAMQoWlX2iyVxwb0NvtfaCHlpim6BVCVixNv20lK+eAxtz6v3eWoV6aANl6
      g6vzEqh4+8HNePvB1f1kFUXB5ZdfjsXFxVhdakEXmONCVVXcd9MeLM8t4FQdIIKAw/u34J5b
      962ZeaqFYag3/hnwzP8J0lle/VtpDOpN/z0UvgREUN+KEAKyuIjO4z9G/3enobY7UPp9zLcU
      nC2MgoOKy146iU1P/wrlz3wKGB+3HSNWnzEFkGH8luuNc7cmN2WsJUlatxCdpnUAL7hRAusU
      r1QFiNm9EqAw4un66+q/A9i+ay+IWIQKsrpJeIRkRfgDq22tbt+ML/3+jZidWwY3MootWzeA
      41Y/4zgOXGsBpH0J2HY91Lv+D+DCc1BBgB03QRm9DIockfCfm0Pzv3wdytyqYaAC+G1pEx7Z
      chVmxSEQqNjZWcG9F1/Fvn98COU/+1P4cZYyBZARVFVFr9eDKIpvRSfwvC8FEOeLKQgCer2e
      bVus1iGoEkhTETkn3PjHjc9MqWwDv/e9UE8fXSOg1Z03Qx293PcMqNtX8fSJ83hxYg6KAlyz
      dxPeefV2lKToZ35pF/4URVUhbBzDjo1jAOgi95tjb+onIC98A2gvAuVNUN/+RSiHH9C26EQE
      wh8AOFVF63v/vCr8OQXS2DKaZeAx9SacFUe1435XHMMTowewdeoVFF8/C3LZHs9jhSmAjCDL
      Mur1OkqlEgRB8LyQR0s7+93MxS9OVjxNdDKD7jrmJZEsDXh9NoqqgrzjT8BJVajnn15dXNxy
      HZTrPw+ZCICfeycE//HSWTxybALt3qpteOr8IuqtLu65ZR84El1+Q9bCQs3GFl+bBjn2v4D0
      3lyDWj4L/PJvoG48BKW4Kdr2LCygf+IEABXFrW+guPMi5vpbcXF5aO1aNCGYloZRUwVsmJ0F
      d5n39QimADJCr9cDIQSdTgfdbhflchmFQsFVmQVCCIaGhgJt5uIXfRVIM5yUkSRJUFUVzWYz
      U0rAC6qqQhaHoL7jP4EcfgBQldVMU/hf/1hp9nDs1Qua8AeAXl/Br07M4F2Hd2DT8Op+04QQ
      LC4uguM4jIx4czeZkTXhbwYhBJh98S3hT+msgMy9ArLnjsjGIiEEyuzcqtInKsSxJRACFEgP
      BdJDTX9ZVUVB6UOEAvjcP5zlAWQESZJQrVZRqVQgCIK2ZV+hUNCmpHS13zTM0EM8fpg4LTQ7
      tYnjOIiiqG2NmXUIIdi5cycEQQDP89oPx3EA4YDyRqAyDnC89tzMfpzo9uX/v703D6+qvBf9
      P2vYU3bmkDkhBMIMFmUQJ5ywDkjFagvibUGtemytV4+n57lP7+1z2+f3Ox57zj3X1nJabD09
      jnW2igUE56IUFQRBIBAIhEBICJn2Tva81nv/2FmLnZ29d3ZCAsGzPs/DA6y9xnev/f2+73fE
      H+pvOguENYLhaNP3UCjE7t27+eCDD9izZ89pvx9fB+Fv4srvv02SwDVwRNbpIvVG6YCECEU7
      hxUqnVzk2I2N3u9UCBxCY273UXKcCuqEoZkKrRXAOYKiKH2W2IFAgEgkkrTps7FfbN2Zs8FA
      101HaBjmK6OhfDLOhfIEkiThdrvT2tfw+UiShK7rRCIR8/8D5UdkZ9gZW5RNm6fveFWMySQv
      y4kQgpMnT2Kz2Vi4cCEdHR3s3buXkpISioqKCIVC51QE1nAihECUzkaUX4h07NPoNoDKSxBF
      3xjRMRFCoFSUI2VlIbwe/EeLkWwRFHuYb2q7UDuz2GsvQUYww9fC3EAzrm8tQmRnDykayeoJ
      fA4ihCAYDOL1elO+jJIU7T+blZUVjWg4A2Gf8UQiEbq6upLeZ0ZGBhkZGQOeR9d1wuEwPT09
      SZtdJ4pBH23KQJZl9u/fz9tvv01mZia33noreXl57Nq1iy1bttDR0cHMmTPxeDz09PTgcrlY
      smQJf/rTnwiFQsybN48LLrhgQMe4JEkcbvHy4of7aDzhRSAozc/ku5dPYnJFLkIIWltb6e7u
      prq6GlVV2bhxozmO5eXllJWVoSgKOTk5CTOcv85IkoQS9iLVrUXqqEcUTELUXI+mpo65Hw5k
      SSLy4UcEXn0NhI6k6Ei2MHrIhqarBGQbkt1GRn4uzisWYLv4oiFFAIGlAM5JhIg2ig+FQvj9
      /pQ/TuMHnG5Jg+FmIAWQmZlpJqYMhBEJ5ff7+0QWpSpPcDaUXipkWWbNmjWUl5dz3nnn9Xv2
      5557jgULFvDKK69wyy238MYbb7Bw4UL279/P4sWLWb16Nffdd1+aQkiioydI/fEuhIDxpblo
      /k6Kioro6elh165dTJw4kfz8fGRZJhKJmCWq29ra0DQNn89Hd3c3s2fPxul0fi2VQKrfhPGb
      GSjrdrjHRRGC0MZ3CH3wAaK759S95uTgWHg1yqSJSPn54HafVp9tywR0DmIkSTmdThRFwe/3
      J423N15uQ0mc6ZXAQKaKwcT6J6uBdK4JpQkTJvDVV1+xceNG7rnnHoqKoolbPT09dHZ2Ul5e
      jsPhYM2aNUiSxNixY3nttdfweDwcOXIEXe9f2iHZd1qYk0FhToa5X49dmFFk48ePp6joVNar
      cY7s7GxycnLMQm+hUIgvv/ySgoICxo0bN+pWVadLOln1A9XfGkzV23TQJAn7dddim/UNInUH
      EB4Pcl4eyqSJZtKXLsSQzD6xHeBG1/TIIm2MF9Jutyct6SBJ0RaSoVAIn893VuLpU61ODEfo
      YNA0rd/sPxmjVVBVVVWxbNky5s2bR319PcFgECEEGzZs4OqrrzZ9PPfff7/p9H3wwQe57LLL
      qKqq6jdmxrtgZF0bSt7YFqswDP9DdnY2ZWVl5rHx709sKQSbzcaFF15IOBxm+/bt+P396+ec
      y+i6zrZt2/jkk09oa2sztwcCAXbs2AFE+1p8+umnbN261Rzn2tpaPB7PiN2XJgSipAR1wWXY
      blyEfPFF6AUFp22Oi10xWyuAcxzDzu9yuejp6emzXZZl/H6/qfEdQwwVOx1SvahDCUvtk6Iv
      +jfwiLX7j1YFUFtby44dOwgGgyxfvpznnnuOFStWEA6HqampQZZlSkpKeOqpp8jOzsbhcPDq
      q6/S09PDN7/5zYQJgNu3b2fbtm10d3ezcuVKcnNzOXjwIO+99x7BYJDvf//7vP7660QiEQ4f
      PsyDDz7ImjVr0DSNzs5OHn744ZT3rGkakydPprOzk9bWVrOj1NcBXdfx+XxkZGTwwgsvcP/9
      96PrOu+++y6bNm1i1qxZbNy4EafTicfjIRwO43a7WbduHddee63ZYnEkGInqq7HK3lIAXwOM
      SJ9wOEwoFEJRFHOm193dfcZL+MZeK5UJyG63n5aQjlcAo13wG1x5uhbhAAAgAElEQVR44YVc
      cMEFKIpCa2srl112GYqisHTpUnOf22+/nVAoZI7R8uXLgajSTMTUqVMZP348r7zyCp2dneTm
      5vL+++9z6623cvz4cT755BPuuOMOurq6eP755ykoKOCuu+5i37597N69O62yIkIIjh07RkVF
      xfANxihAURSKiop46623OO+884DoO3TDDTdw9OhRAMaNG8eaNWsIBoNceOGFlJeX95lwnQvI
      RJPM9IYjoCjI46osBfB1QZZlXC4Xuq6b2cIQdbIaSsAIJxyO6BghBJFIhFAo1GdJKkTUxmyU
      rEhWBkJV1SFVNDVmL7HXi2W0C38hBH6/31yNFRYWUthr041/FmMMhRCm2SeZkFZVlSeeeIKm
      piaWLVsGwMyZM3nmmWfQdZ38/Ghc+9q1a7nhhhvMcdy4cSMrV65Me9x8Pt+wVBUdbWRmZjJr
      1iyOHDkC9H2PhBDU1dWxcOFCuru72b9//5CV4EiV0k50vj61tSQJfd9+gm+8idbSApKEMnas
      pQC+Thghn7HVQiUp2kEsGAyaP3pN0067oqiu63R3dyec4YfDYbOlYzKBZR9ks3IDIyrjXA1L
      FEJw5MgRqqur0xa68aucRMcFg0EeeOABNmzYwJdffsmcOXOYN28e48aNY9u2beTk5OD3+2lt
      baWyshKINgbJzs4mMzMzrfswEtZGu5IdLB0dHdTX15OTk0NbWxuHDh0iJyeHpqYmjh49ys6d
      OwkEAoRCITPzvrGxkbq6OhwOB9XV1WkrRam7G9HWjjyuaticxslW+H2+p+5uguvWo/UqOABt
      /37LCfx1wbD5GzNrQ1AY24xyywOVZkgHIQShUCileccsmJWEofYziLVfnmuz/5Fky5YtPPnk
      k3z55ZeMGzeOZ599loaGBtavX09jYyNz5sxh7969XHPNNabi37lzJzfeeOOgFNHpmu1GI263
      G4fDgd/vZ8WKFXzwwQemqe1b3/oWADfffDM2m42CggIWLlwIwPTp06mpqUnrGpIkEYwIjjW1
      09JwHK8/HK0qOgjiHfWxkUlGmGqi35wsy4iODvTm5v73ZeUBfP2Jt5EbL8tQZ3NCCLxeb1ql
      nhMhSRI5OTlDUgKRSITOzs5+L3uswhvt1NfXD+sKwCgZEQwGUVWV1tZWvF4vNTU1BINB7HZ7
      WuOSqmqrce26ujomTZo0rCGPZ5tYv4oQAo/HM+i6SKnCQCVJ4khrN8+8s4fWLj92VSYv08m8
      ySUsOK8CWxoLcSWiEd6xA9uF88yJl8/n48CBA8yaNcu8fuz7YSh6v9+Po7ML/7//FtHe3ue8
      lgnovwDxAmM4zD8GhnAajAP2dIR0vNA3rj0as36Hi/jnjMdQ6IYgKyoqMuP7DVPbcAlsm81G
      e3s7ubm5A+98jhAfHu12uwcdMp1qRa3p8Ny7e6k/3mVua/MEOHaym5xMB3MnFQ24IhcSSLZT
      4lqSJI4fP47T6TQrAhil1+12O16vF5/PR2FhIbW1tUyqrsYxZzah9z8A49mcTksBWAyOZEvN
      +FWG0W/Y+MzwCxjF3YYqrGOrn36dhX48qZSmkRk+0gghqKiooK6ujry8vHPSB5OIkX4Ojy/E
      sbbuftv9oQh7Gtq4cErJgN+frigo559v7idJEj6fj4qKCpqbm3G73bhcLrMywLFjxygrK8Pp
      dEb7bdjtOK5ZiOR2o+3bB7KCMnOGpQAsBoeu6/j9fjMZJvbHoygKdrvd7Ocbu8pwOBw4nU4z
      6eh0FMC5Tqwwl2UZOjpA15Hy89FGuVBVVZVIJILH48Htdpvf8ddFGYwETrtCeUEmB5r69hSW
      JMhxO9IeO13XkXUd/H4EUDRmDB6Ph+7ubjIzM4lEIoTDYTIyMpgwYQLt7e00NTXhcESvEXY6
      8XzjPNwXXEA4EsZRWGgpAIv0MYrQGbZ/WZb7+BMMZ1oi4S5JUtIY9sGQypRxrqwGjFmcIsuE
      33mX4KZNoOnY5szB8a0b0Ubxc0iSRGVlJV1dXTQ2NpolScaNG2cpgSS47ArfvWIy72xtoP54
      Jx5fCCSoLs5m/tTSpOMWv6qWg0HCH/2VyK5dICsUzr4A2yUXc7S3perRo0dxuVzY7XZOnDhB
      KBSiuLgYSZI4evQolZWV+EMh7DkuQgg629stBWAxOAzbqBFZZGCYds4EA4a8jXLMSKyWFgLr
      34beEteh997DNnMG0hBru5/O/Rjmg4Guq+s6eXl5FBQU4PV6kSSJAwcOnKE7PTcRQlBTmk3V
      DTM40enjYFMXkgRTKvMZk9O3wF6izHaIJnFFtm4juP5t6F0Fa01NSDnZlPeahqZMmWKGSBt5
      CkYOSVlZGSdPnmTcuHHouk52RgaeLVstBWAxOIwCdEZrydjQ0pHmXI39j8d4Bt3rPeWQA9B1
      9K7OMx6bbbPZsNlsBAKBAcdX1QNIdRtA18iquQ4cWUOOBvuvhBACVYbyAjcVY6J5F7qu92v3
      GR+ibQZXAJHaWlP4A+D3o9XuR+6NAkpWDr25uZlAIEBlZWV0tS5J+PYfYM2mfZYCsEgfo7hc
      7Ez/TM68jZc8UR7DQPfhcrkGzF04UxjNfdTKSpSyMjM5Rx4zBqVmYrTKYxxDibZKF3OWOUA5
      CEVRkHY8i7TreSRAeI/CRX+P0aAmtmnRSCBJElIkElWaqopQ1XNuQpBOWZZE77cA5OzsvjvK
      MlJ2lnlOWZbp6urC7/dTXFwMnErYNPIVZEAcPEjD+g/5VCqxFIDF4Dkb5pZQKGTWXhnM9Q3H
      tMvlwul0EgwG0zJ1jCSGkNXtdlz3/IDwp59BJII6dw56VmbCe4svfTGc34FxTqfTSXd3/2iV
      WKSuhlPpS53R0tTjxo1j3759hEIhysvLycnJGXZzoKzr6HtrCe3ahfB4kLKzsZ03E3nKFPRz
      IPdjqJirRUnCNn8+kfpD6MePR0s5jKtCnTObSO/EyOv10traSllZGRCtZhoIBCgpKYmaboXA
      duIE/j+9SE9XhGBJuaUALEY3Ru2ceKE9kADMyMjolxVtbJdleUBBN5zEJ6iNHTvWTIKTxozB
      eeMiYODZ4UhFQBmx4wPlZ+i6jjz1VvAcjTaun/4ddF2Qn59v1oYC2LFjB+eff/6Qs73jkYHI
      Xz8m+PbbiJjvLbLjSxzXXYd6xQK+PmlpfVcAsX/LFeW47liBduAgkiwjT5qIlpuL1jvuJ06c
      MN8tVVUJBoP4fD46OjpwOBwU5OUhfbEdvbmZQtVFmd5pZQJbjF6MrmdDqbqYbBZqRC11dnae
      sVWAkalr2Mpj6yD5/X6zeB5Em8LYbDazB7Lf74/GcUuSWV/JOOeZIN6/E5t0l8gnYyQk7du3
      D7vdTlVVVe8+Atl3EinQjnDmoWcUousDj78kSXDgAD3//jtI5Guw23D/6IdQU3POmYOSMRyr
      JyEE27dvZ+zYsTQ1NeF2u6koLUX/8xuE/roJAXTa7dYKwGJ0omkamqal3Xwk3m5qCFbDPg3R
      gmmBQOCslDHYsmULX3zxBceOHeOOO+6gpqbG3Nba2spdd93Ftm3bOHnyJEVFRSxcuJBHH32U
      8ePHEwqFuPPOO8/4PUPqrPFESsho2DN+/Hja29vZtGkT48aNo0qrQ/riSSTfCURGIdKsO6H6
      6gGVgCRJhA/WJxb+AKEwkfpD2CZOPCcVQHwE0ED7+nw+s9R7/Gd+v9/MtTECNVpbW8nKyiIc
      DtN84gSl581E+nwr+P3khUKWArAYfUQiEXp6egiFQuaPIpGwsdvtOBwOMxIpEong9/vRNM2c
      QWuaZnZtUhTlrIWLzp8/n/nz5/Pkk0+az7Rr1y6+853voGkaH330EYcOHeL8889n2rRpqKqK
      0+mkurqa2tras3LPBpqm8eKLL+LxeFi5ciX19fV8/PHHTJs2jZqaGt58802ys7PNMtQGBQUF
      XHrppWie40jv/xHJ0wiA5DkK2/+IXDwT3Vl4Nh5p1JBI6AeDQX7xi19QXV3NzJkzmT9/PpFI
      hN/+9rdmro3RVnT//v0sXLgQVVXZu3cvHR0d/PSnPyUcDjN16lQOHz5MdXU19fX1FBYVoZaV
      4bzl2wTffx/h8VrVQC1OH6M0hJGJaDQSj/3T09OTdn0VI9ks1YzIZrORkZFhRiUZAjMvL88s
      iW3MmAwURSEzMzPhDGqkEULwm9/8hurqajMi4/rrr2fVqlWsWrUKn89Hc3MzpaWl/OEPf8Dr
      9WKz2WhpaemTbzEUTlfpvfbaa8yfP597770Xm83GunXruPvuu7n44ot55ZVX+P73v09GRgZ1
      dXV9jjPMbXbNCz0n+t6TrxXJ3z7gvQkhUCeMh2Tlw+021PHV5+Ts3yC2vIpR1kOWZa688krm
      z58PRH8TbreblStX0tXVxUUXXcQdd9xBaWkpV1xxBbW1tdx///1cfPHF7Nu3zyy/4vP58Pl8
      VFdXY7fbCQuBfNF8bD+8D/sD91srAIvBYzgrY52Wuq6nFNyyLKfVktJQJAljoXudqUbHs2Sm
      CSP1PRgM9lE6xgrgbFQMXbduHfPnz2fOnDlIkoTX66WkpISf//znrFu3jvLycjo6Opg4cSIV
      FRUcP36c0tJSbr31Vh577LEh9XOWZRkl0AYnayG/Bi2jeEjmr4MHD9LY2IjH4+G2226jtraW
      f/u3f2P8+PFcdtll/P3f/z2aprFo0aKExwtnHpIjDyKnzHnCngeu/LTMHnJ1NfZ58wht3ty3
      CbosY593IVJ1dcLQ2XMRIQQOh4MlS5bw6aefsm7dOh544AGAfjk3jY2NlJaWmn2jIRruHOhN
      LIToatroCw7R31coFCKsKORUVFgKwGJgEgl8Y7umaQSDwQEjVGJnOKlmfZIkkZmZadadN5LN
      4mPMBxLiRptMVVXp7u4mEomYUSlnIxcgOzubL774gu3bt3PJJZewdu1ali5dyvr16ykpKWHm
      zJnk5uby1FNPMXHiRKZOnUp9fT2/+93vWLhwYXT2Fg6nPZuXJAmlZQfSe/8DKewD2QZX/AIq
      L0nL+RpLfn4+K1eu5NChQ+zcuZNLL72UlStXsmrVKhoaGvj1r3/N559/ztatW5k3b16/40VG
      IZHiG5D3PItsC6OHVfRx1yFlFEEa96LLMvZvL0EqyCO87QuEz4+U4cI2+wJsl1/+tQsD9fl8
      VFVVMW3aNJ544gmzwFtHRwehUMj0Y61Zs4Yf/OAH5m+jo6PDNCsaNZvKy8vNVXBskyiPx0Nr
      a6sVBWSRGEPYx1b+NBx8hm3d6CwGA5sZjM5kxiwmUUE44zqxTS5SlUEezLMYPgVFUc54QTlD
      gRm0t7djs9kG3VpxMPetKArKO/+AdOxTc5sonIZ2/b+jifTHUpZl9uzZw/r164lEItx+++28
      /PLLlJaW4vV6yc3Npaenh8bGRu666y7Ky8sTrjIUv5/Qmy+gNx1ELqlGv/ZmnEVFg1LGsiSD
      3w/+qAIQvS1Qz2XMnJC453jppZfw+XwsXryYN998k+9+97s0NjayefNmFi1aRGVlJdu2bTNN
      RB0dHTz//PNMnjyZa665hu7ubk6cOEFnZyfl5eUcOnSI7OxsSkpKzH4agUDAUgAWidF13Szh
      bNj2DRI1JEmH2DLQhs0+NszT5XL1qyI6nASDQbxe74icOxXxCqy9vZ28vLxBHQ+Dq+k/nApA
      URTTrOB0OgHo6uoiOzvbLEtst9tRVTVpYxRJkqKVLH0+hMtFTzDInj17UFWVuXPn9iknYURv
      nQ6pGrSMFmJX1LH/jvX5aJpGU1OT2cYzXTo6Oujs7GTMmDHYbDa++uorpk+fTjAYpKOjg8zM
      TMLhsGUCsuiP4UDq6upK+mM2GIw9PVaJGKsHY3kL0Rh4IYQZ9z7cGMqls7Nz4J2Hkfgfemdn
      p+moHgrpjLmu68gzb4cTu0wTkJj53xCS3K/+TDoYgt8gtmOW0fcB6GOPTkivMzfb4TBnr0KI
      frHv8TkQBt3d3TgcDmw2m2mCNEx74XCYUCiE2+02HeiRSITi4uJRUQLEIJ2Ev9hnLi0tNX87
      iXxjkUiEUChEZmYmHo+HkydPmv42oxicLMvmGMiyjMvl4uDBg9YKwKI/mqYRCASSzpb71bMf
      Iol+CJIkkZubO6KVRc/WSgCiz9zQ0MDYsWP7tOgcDOmO+XA5gQdDbO5FrJlPCGHWrTeS2oza
      UgaRSMQ00f385z9nypQpRCIR7rjjDiRJ4sUXXyQQCFBYWMiiRYuor6/nxz/+MWvXrqW2tpa3
      3nqLwsJCli9fzuHDh9E0jYaGBsrKysxKmWeTZH60eBKZPBP54Yz9VFU1Ew1tNptZlwlO+d5k
      WTajzGRZJhQK0d3dba0ALBKTqr9pLAM5deOx2Ww4HA7U3kJehl/BKNRmzPgGe97BYDQAH0pk
      zeli5CsY/zY4nTDGVApBd42BykuNiyTdN50iZenyn//5n+zZs4df/vKX5jP+8z//M2VlZei6
      ztVXX81zzz1HOBzmvvvuo7i4mA8//JCXXnqJ3/72t0DUDFJdXc2+ffvM8x44cIA5c+Ywa9Ys
      hBC8+uqr3HDDDQgh2LBhAxdeeCFZWVnY7XYmTpxIJBJh8uTJbNiwgYyMjNPqWZCoQFv85/EN
      2g2SBVEkO89AQRLx9xKJRMx+wEbHvPgVjxDRXsdOp5MxY8Zw4MABJkyYYOUBWPTndDp2Qf8X
      3piFOBwO3G43qqr2yVZ0uVzk5OSQl5fXJ7FrJMnOzj5j/QviiU9IG4yTO9F+xlgm+mNEUaXa
      Z7gT5FasWGHmOkB0xeVwOFixYgU+n48NGzbw0EMP8aMf/Yj3338fv9/Pl19+yXnnnQdgmnVa
      Wlr6mJeOHz9OZWUljz32GC+//DJz587F4/HQ1dWFx+PB5XLxt7/9jV27dvUJXLjuuusIh8Mc
      OHCgjwJMJ4BBlmUkWabhRDeNJ31IstLv+5JlmS5fmKc37uHRlz7nT+/vwxfUkypbVVXNznmA
      +Tsw/p2IZCU50kUIwaRJk4hEInz++edkZ2cjy7K1ArBIjMPhSFiKIdEKIPbvVBgvtyGQYjF+
      sGeqt4Asy+Tk5JiJMmeS+NLOcGpchzpDPXHiBB9//DE33XSTGRb41FNPEYlE0DSNpUuX8vrr
      r+NyuVi6dCmbNm2irq6OUCjE9ddfT1VV1bA8G/RfkTgcDnJycnjkkUfMWbzdbkcIQSAQYPXq
      1Xzzm99kzZo1ZvRKdXU1t9xyC7/85S9Nc1FFRQVTp06luLiY6upqjh07xpEjR6ivr6e8vJzy
      8nKAfj6ecDhMTU0NDQ0NbNy4kauvvtpslVhakAkn9yMKJqPJfZuzyLLMsZM9/PuaHRxvjwYq
      VBZm8aMbZ1LU044syciVFZzsDvK/n95Mtz9qp6890s62uhZ+vuJi3Ha5z4xdkiQ++OADcnJy
      kCSJkpISFEWhubkZRVHo6emhoqKC8vLyfiuJZO9IIqUWS2wQQX5+PgUFBafux/IBWMRjLCGN
      pCyfz2eaLZLNaiQp2lXKKBIWHzkEkJWVZc7wRxNnWgkcOnSIqqqqhOOQjgIwftCGkoZootmB
      Awf44Q9/2Gdlo2kajz32GLm5udx8883s2bMHIQQLFiwAYPXq1SxdupTs7Oxh8Q8YPoAnnniC
      u+++m1AoZNqpNU3j8ccfZ8aMGRQWFuL1erHb7fj9frxeLxs3buTBBx9k0qRJvPbaa7S0tHDV
      VVfx/vvvc/PNN9PT08OGDRuYMWMGl19+OUIItm7dyty5cwkEAjzzzDM4HA6+973v9RGescLX
      ZrOxd+9egsEgs6aOR3pjJVJPCyKrHP2mP3Kyy09Rb3hqRBf87D8/MYW/QUXIwz8c/QgFgVRe
      zssT5vDXo/2/t+vmjOO2q6b0MTXu3LmTyZMn43A4OHr0KPX19cyYMYOCggJzn+bmZlpbW3G5
      XEyaNKlPDk28GSmdCVMyU6MkSdYKwKI/RgGwWEETm0QSa6IxXkCbzWYeY7ywPp/PjL03QjxH
      m/CHaITLmewRMFx9jY2kuZ6eHhYtWsSTTz7Zbx9jxltfX8/atWtNwbhgwQK8Xi+appGTkzNs
      zx4Oh3nhhRcIh8P8+c9/5sSJEyxevJgtW7bQ0tLC9773PQoLC3n66adRVZXbb7/dfCfKy8uZ
      OHEiALfccot5TpfLRUlJCZIk9TEtSZLE3Llzgeh3eM8995ifxdrAY8fUWA1IkgQtXyD1tEQ/
      8DYhtdXR1uXik08+Yfr06QhXQT/hD9Bky6TJnk1lqAu66mhuKQTG9tvv2OEmQqHx1NfXEwqF
      yMrKMpMTdV2nqqrK9EsYdnyAwsJCiouL2bdvH2+//TazZ89OGDacSvgnMm8l+o4tBWCRkFgl
      EPuiJbJ/JjoWouGBRkyz0UJyNGKUqYhNoR9JhsvmPpBTUQjBV199xcKFCzn//PPZsWOHGRoJ
      0Ro/S5Ys6RMieLrYbDZWrFhh/r+hoYHy8nJuvfXWPvvdcccd/Y41hDnAsWPHCIfDFBYWUl1d
      TWNjI5WVlTQ3N+Nyufr4BhKRTokJUTAF4S6OKoGsMkTBRCYWuZgyZQpCCOqOdQz8vBl+SpV2
      9ofjFIAQlLgUsyS20+mkubnZNPnIra0E17wAnfVQOAXHt5YRyckxw6N1XWfq1KlUV1fT0NBg
      KoBEYaDJiP880f6WArBISSJ7/UAYS/5zCbvdfsYUwHCFYgaDQbO2y8svv8zf/vY3srKyqK6u
      pqCggJaWFubMmYPNZuPw4cPs2bOH2tpafvKTnxAKhWhra6O0tHRY7sUg/tkqKioG/bxCCMrK
      yggEAmzevBld16muriYcDpumkuEYQ03NgCVPI7XXIQomRX0AMZnv44pzKM1391sFlIW8lIWi
      FWZ1v4MlGZv4IjgJrzillHJFiEUXTDZDMmPvXfH7CT7z/5MxZidSkUBoO/E93YDjR/8fsWo4
      EokgyzKRSKRf5M9Av8lkUXT9lILlA7CwiNLR0XFGEobq6+sZN27csK2I4jNnX331VRYvXtyv
      +J6RgJYo0mS0Zs46HA7TkT1SJAvxTOQELgt5uKNlKyVhozOZwDX2OD1FQd70XcpxrYDirhDX
      uSKU/sN/JxzXNEeWZcRnW1C3/QI181SARdiTjX75IzBjRj/H7xdffMHMmTNN05FxnnSea6BV
      wrk1TbOwGEGcTueQuo8NlpH2NcSbWwxyc3NH9LojQWwXtJEi9vuIFbBCCMrHuPmnOy+hocWL
      LEmUh7oI/nEvenNUAcgVlfDNu3B+8ApLPbvQfC5E3kQyVt6FxsD5A+ncW0lJSZ+M58EcaykA
      C4s0cTgc+Hy+ERfQw+0LORsJbaOZ0wmpNYIcOnpCNLR4qS7JJtdtp6oos3cPN5k/+19ojY3R
      vrwVFeiA7fzz0Robsfdu05Ikfum6jm3mNwhumoSSsRNJFghNJhSZjmPKFEIxBRYNTidJbyAl
      YCkAC4teZFnGbrefkVnnUDjd2eTXHVmWkTU/0pHNgISovBhNdqQ9ZqI3U3rX4TZ+88YOIpqO
      XVV48JYLmFKRe6phCyD15hzEKt/YbamUkJ6Rgf37/wvfWy9AWz2MmYJjxW1EFAWhaeZ9GMe7
      XC56enr6lM1IF0sBWFgMAofDMeIKYCi2dkUIItu2oc6Zg2YpgX5IkoTS3YS0/gEkX7T7mHAX
      I13/OJGMkvTzKySJt/5WT0SLfkehiMZbfzvItKVz+5V3iCdRjZ+kmb0lJbjufdjcV9d1JF1P
      aObJzc2ltraWMWPGpO0LSTehcnTG5VlYnCWMfIaRZEgmIEkCxZqvJUOWZaQtvzKFP4DU04L0
      6eODGm+J4c1CV1U14Z/47F2jHESiP7quk5mZOShHeLphxtYbZWERgyRJpi9gpBhK9U8B2ObM
      jpoH4koEWET1o9RxoP8H7QcGmXMhWHzReFa9sYOwpmO3KSy+aIJZbM0ww6VaAcReT9M03nrr
      LY4cOcLChQuZNm0a4XCYp556yizVfOWVV7Jhwwbsdju33347NpuNtWvXMnfuXLPlo9frNR3T
      hgIxMvaT3Us6z20pAAuLOIxqoSNlbx9sElh85jUMXy7BuYYkSciahuit9yPl5qIrCkKAyKtB
      8p3se0B+TdLvMXZcDfu+ruucVz2GR+9eQEOLx3QCx4dmJjtnvBLQNI1p06Zxww038PjjjzNt
      2jRsNht33303Pp+P3//+9xQUFHDvvffy2WefsXnzZgoKCmhra+PEiRNm+ebi4mJ8Ph95agBp
      6zPgOQr5E1C+8X3CataQ3wdLAVhYxGEsx2O7VA0nQ1EsmzdvZseOHSxZsoSysrKE5zvb9e7j
      GW6ntSRJcPQY/r/8Ba2xEZBQKitw3HgjjK1EXPgArN2PFGwHQDjHIOb9OKFwlGUZfc8egus3
      gCThWHQ98uTJZhmT3AyVvPEF/QqyQXpZxsazOxwOqqurWbVqFZdeemmffdatW8f111+P2+3m
      V7/6FV999RWrV6/GbrfT3d3d55yFhYXY/M1Ia+5FCnZFNzZ/AUc+Rl38e8JK5pDG2vIBWFgk
      ID6JajgZrKAOBoNs3bqVO++8k1dffdVM2ootEjaakGUJNdiG2rEfNXASWU5d3z5dpM5O/M88
      S2TXV4jOLkRnJ5FdX+F/5llEWztaVgX6LX9Cm/MPaHN+gn7L80TcpYmbrrS341v9e7SDB9EO
      HMC3+gmkrq4++5zOuJoRQ70F8BYtWmR2QAMIhUIcPnyYyZMno6oqDz30EHfddRcbNmxI/OwI
      pB1PnRL+xvbu48hfvdjPz5HuvVsrAAuLBNjt9hELuxzsOY3yyE6nE5fLNWrj/oUQyJKE0vAR
      0hdPIvlaEK5CpPPvhOqr0fWYjFhJgq4uhMeLnJ0FOTnoKcZFlmUiX+5EP3as32f6sWNEdu1C
      vXwBEcWJPP1b0e26nrD9pSRJRI4cgdhxDIaisf3Tp59WzH08nZ2d7Ny5k6ysLA4ePEhOTg5V
      VVXs3buXyy67DCEE7777Lo2NjRw7doxrr72WzZs3s379epMwCpcAAA9ySURBVJxOJ7m5uZSV
      lSGhR80+ieg6MuTVn6UALCwSYDiDR6I+0GAFjNvtNmvch8PhUVtUD0AJtiFt/w8kzxEAJO9R
      2P4fyEUz0F1F0X0UhcinnxFctw69sws5JwfH4htRZl+QUgnora3JPztxKvpnIHu4EAJ17FhQ
      1VNKwGFHqazsE2KbKKwz0f9TTRQKCgp4+umngag/4NVXX+Wiiy4yexcALFy4EJ/Ph81mM2P9
      L774YvPzcDiMQIbsCjjxVf+L5IwdsiN49L5JFhZnmdFS0C4/P5+mpiZWrVpFSUnJqLmvREiB
      TogJxQSQfCeRAu1muGNw4zvsfmktr0UKeT1zIvu9Gr431kBcI5d45MLC5J8VFQ3qPkV+Phl/
      dy/KhAkoNTVk/N3fIXob3aeqvx//WSriha+iKCxdujRhlU63250y0UvTBWLWHQhHTt/nyCxF
      n7Gsb0LaIJoqjd43ycLCwuQf//Ef6enpwe12nxVn70COZtPx6cxFyiiCroZTn7kLEc78qOnl
      y5387Z3PeaVoDj2yDSSJT7MquaXtKxbs3oN66SUJZ/C6rqOedx7yJ5v7mYHk8nLUmTMHFQmj
      aRry1ClkTJ9mnn8gf8pgV246Mp/va+b8CWP6NUeKJZnAjo88imSUoH7rP2BnbxRQXg3iG98j
      omYhDbGjnqUALCzOAYzmL2eTVErA7P/sGoN0/l1g+AAyCmHWnejuYiRJon3TFt7NqTGFP4BP
      sfNebg0ztn9F8WWXJj03uTm4vv89gn/5C1pj1B6uVFbgWHwjIi83ob3f6IU8EKnMakKIpBFh
      KUs+CAiGI2Z9IRha+K4h1H0+H21tAaou+ol5TU3TEAnaRqaLpQAsLM4wg51JjlanbyIiEQ2q
      Lkcumo7kb0c489AzCtF1gapKeDo8dKnFpvA36FIceDq8lMSdL1Zg6rqOVFaK8wd3Ibq6ojm7
      ubmI3h7IqQgGg8iy3K9dZk9Pj9kOs6enh8zMTNOm7/P5cLvdQOKCbKmEv6qq2GWZS6aXmz0B
      jGYv6Xz/iaLQHA4H2dnZfbalUm7plPi2FICFxRlmqFUqDSFyNsM+08k50HWB7ihAco6J7t8b
      /SOEIDsvm5zOIF7F0UcJ5GhBsvOifUlihVq84BVCEJEk5Px8xKmN5udG7+HYY95//33q6uqo
      r6/noYceoqSkhPb2dlatWkVNTQ1XXHEFb7/9Nna7naamJh5++GEeeeQRCgsLqaqq4rrrrhv0
      mMcqGlVVzdn66VQqNY7z+/1m/23jvIZfKBQKEYlEBuyYZmA5gS0sEmD0aR0tyJqG7z/+iKyN
      zgzgdHrQCiHIv2w+C7sO4NbDpuDO0EJc3XmAgkvnoe3bR+CZ5wg88yxabS02RYm2UOw15QQC
      AVPwxZttbDYbe/bs6dPKFOCqq67innvuobT0VE7A2rVrufTSS6msrKS0tJTly5czdepUHA4H
      zc3NTJs2jbvvvpv6+voBnzkRQgjee+89Vq9eTVtbW9rHGQSDQX7605/yhz/8gS1btgDRaKDf
      //73PP/88zz66KMA7Nmzh2XLlgGwY8cOVq1axeuvv04oFEpLyVgrAAuLOIQQBIPBM9YiMh2E
      quK6bRlCkRPaulMeewYyhVM5H2Nj/tWxlVx03Xzy3t7ETvsYBHBe6CRTr70U2e3G9+QfEb1Z
      sMrxd5GmOlEnXkNo4hIaGxs5dOgQ06ZNw+VycejQIcrLy3G5XAQCAQKBAHl5edjtdnbv3k0g
      EKCmpgan08m//Mu/cMUVV5gtMLu6uqioqMDj8fDnP/+ZmTNn8sEHHzBmzBgCgYBp+knlG0hl
      XvF4PNTV1XH77bfz7LPPct999/Ubr0T/N/42wn2vvPJKampqgKiCu/fee2lra+PJJ58kGAzy
      zjvvcNVVV6HrOh9++CGzZ88mPz8fu91uNppP9QzWCsDCIgZd1/H5fP1S8YeTQTvqVDU6C3a7
      UVS1j3khXYySBmfafCRLEvqOHfh+/Tg9//cxeh77NUp2Nt/42UPc9u2LWP7t+cz62UM4r1lI
      6LPPTwn/DD/Oonrk9j3In/4au7eBsrIyKioqqKioYP/+/VxwwQUcPnyYzs5Os27O8ePHkSSJ
      oqIi8vLyOHToEC+//DI33XQT8+fPRwiBx+Nh+vTpOBwO5s+fT2dnJzk5OTz88MMcOXKEkpIS
      9u3bh8/nG/IqsLm5mQkTJuByuRLa6Q2FaZj24gvNORwOlixZwqeffsrjjz9uHtfQ0MCvfvUr
      7rnnHl555RVmz56Nx+Ohq6sLj8eD2+3mo48+ora21jwmNms8PtrJWgFYWMTg8/kIBAL9En2G
      k8GG6gGmUzIjI2NIx8b+O5H5ZDDnGBRdHgJv/QW9JZoboLe2EnzrLygTHkCdfQG6rqMJgZLG
      +Y3ibcYfWZbNqpglJSXmuASDQQ4dOsTEiRPxer3k5+ezadMmPv74YxYsWMCaNWt4+OGHeeGF
      F9i1axfLly/ntddew+PxcOWVV5KRkcHMmTN56qmnWL58edqPGvu9ZmZm0tnZadroUx1jEOvv
      8Pl8VFVVMW3aNJ544gn8fj+6rvPyyy/zs5/9DFVVmTBhAs3NzTQ0NNDY2EhZWRmVlZUEAgG6
      estaJEsGM7ZbTeEtLGLQdb1fc/ihCOxUHDx4kPHjx6efrKOq/Ou//is5OTkUFhZy8803pz0z
      TZawNBgFEH+OVOMRb26SjzXR/X8fg94mO7I9hGtcM+rkiXD5T4i4ik8Jqbq6PiYg57huHFOd
      MPEaAhO+hcvlYseOHYwZMwZVVWlqaqKgoICsrCxUVSUjI4OGhgYmTZrE1q1bcblcZGZm9sm6
      bW1txe12p+0kNZ4pHXNg7JgqisIjjzxCXl4ekydP5pprrkkYShrb+Ss+4eyll17C5/OxePFi
      3nzzTW6++WbeeustZFkmOzubZcuWIYRg27ZtzJkzB6/XywsvvEBmZibLli2jqakJSZIoLi5O
      qIQsBWBhkYBAIIDX6+0jzM6mAujo6OC9997jtttuY/Xq1dx5551pH5tMAaT7TIM9PrapOoDs
      8eJ7/HH05hYA3DWHsRd4ouceexnaVf+E1uvYliUJUVdH6LPPQQhs8+ahTJ5kRgtpmmauAnRd
      7xdaaaxsDLt3Mt9HOj6R+OdOR+HGKgCHw2GaEzMzM/vlEsSPX/z1YsNANU2jqamJysrKAe8h
      Fk3TaGtro6mpiaKiIoqKivopAssEZGERh1GTJRwOj4jN3BBY6QrxYDBozliV3pj30xHeQ7nX
      ROdOJsD63FtONs7FiwmsWYPe0YkUX+5AnDqXLgTSxIk4J08GospEi3O0xjpeE2XXGvbtWIEd
      K5jjxyTRSshMajvNnguyLKedvBc/xpFIpM+2kpKSpEoo2XesaRpZWVlMmzaNzs5Odu/eTX5+
      PqWlpaYisBSAhUUcI2X/TzbzjO02lYji4mIOHjyIz+ejp6cHVVUTCifj/OkI/cEooHSSl4QQ
      Zrim8X9d19GFQJ71DdzjqxFdHiRbALHvGRA64sIfE4mJ2Y+Na0+XRMI8/n5jnzX+OYxxjI/C
      OV3FOVBfaUPJJBvbZElcse9JugreUAS5ubl0dHSwc+dOioqKonWl0nweC4v/UoxEDkAiZ2z8
      /xMpApvNxvz583nyySf57ne/i6IoSWenI7liSYYQApuqIO1ZC3XrkYSOqLkWefpNaL3H6ydO
      IIRAHTsJvfyf0HU9OsvtVX7JnmOoCjjRPQ/0DAPtMxIku16q+0mlOFKhaRrZ2dnk5eXR1dXF
      7t27LR+AhUUsQgjC4XAfH8BwYQjthoYGKisrkzpi45WAqqr9BGEi88dgTT6n4weIPVZRFKRP
      foNc93Kflura+CVw2UP4Vv2OyJ490X0nTyLjgR8TijFxxEb3GMQruFSmmkT7JPssnTEaquks
      Xcd6OivMZBVHB6pZNJj7VhTFWgFYWMRixGWPVC8A4xqpiJ/9pmuLHi7zRfy9JJuFmtdsP4Z8
      4HXin0quf5OQMoPI3r3mNm3ffrR9+5AnThzQ1BMrtE8XwzGczmrmTKwC4mf48cprsOcayj1r
      mmYpAAuLeBRFwel0EolERqwcRKzJJ9nngBnxkg7x+8WXE04UDZOuMkr2mSzL0NkAIkGYIQI6
      GhIcmfq8kiShIfNFXSsCmDWhEIci93meREIv3p5vbItXpCMh5AdjqhrIqZ5Kkadyvg8FSwFY
      WCRAURRcLhder3fYzx0btmj8PxGDcdQOxHCeK/685FaBpIDoqywFEsq8haiHwqYJSC4qQikp
      QVbVPmGRsTPhtrZ2Hn1lB209UaWSn+Xkfyybx5hshzlusVE6iUIq+91jiu3GOc4EA9n8Y5XA
      QH6M4VBiVikIC4sESJJkJhdB6rK7gyVW+A/nbDSVGWGglUaqcyay0fc5Z345es23iT+TPv4m
      pKLxZPz4R6gzZ0KvM9j7P39G+K2/4OjtuxyLIkk8v2E7bT2nlEm7N8Dz7+01o4wSNUBPZDNP
      x9Qz2PGPz0aO/XO6pHsfw/nOWCsAC4skyLKM3W43k4t8Pl/C/QYTsWKYTRLNWJMK2EGQaNaY
      TEANRnClMktomoZy8f3oueN6o4AEouabMP0mdCHQvthOZNeuUwcIQXD928glJSizLzDNbDab
      jcBrr9PQJIHk7nONI8c7CH2yGdHWhlSQjzplClp2dh8/QqxSjb3fRKav0xGg6WZBp9onGfHF
      2+K/z1QRU0PBUgAWFkkw6s2oqjqgLyBdJZDKHBF77FBnlbECI9U5hju7WReCnvHX8dfuGRxu
      8TC2J4sF/gg5bjvhzz5PeEz4s89xzpndZ5t24ADlwRI6MvoqgNKO4zS9sAOv7CBLD1JQkI3r
      u99BmZTYmRxb8Cz+u0nHtj5Y4ld1BvHfaTok8/mk+s6GqgQsBWBhkQKjpICqqjidzoSRQckE
      TSzxAimRjTd2++kII2PFkurz0zl3IiKa4E/v72XL3uMIAZ/va+bICS8/uGFm0nPp7e3Q3Y3s
      cpl5AY6VK7i9/hj/Z1c3bZ7oWOdE/Iz3nWRVyUV0qC4kIFsLMHP9Tm4pKMJVkNNvJRAvEI0M
      6sFEVMX7alIxkG0/1T7pnHe4FbaB5QOwsBgAw/bsdDrNloHJSBWdkkhRDPeS3iDVzH8kONHl
      Z9ehk8Te+u7DJ2lu78E2b27CY/Tjxwm+/Ao2IXA6ndjtdpSSEsoumcPyq6ZG+wgA3YqDD3Oq
      abW7icgKYVmhzebmQz2XX7y+k0AocTKZgaqqqC0t2LzeQcfqG6vARL6H+H2Hm3Sc1Kdrzvp/
      YVVL/EUFbS0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Dashboard 1' width='384'>
      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
      4IOXnLWxvr6etra2KQeyb9++KW/b1tbG66+/ftHndV1n//79Uy7/cg4ePIjH47ng8ddff52f
      /OQnl0xOQggxUy46G+iJEye45ppruPfeewG499570XUdTdOoqqqira2NvLw8lixZcsG2uq5z
      5MgROjo6WLdunX9K2IaGBmpra8nKymLp0qUXrC1bUVFBY2Mja9asISMjw7+k3Oi6rr29vQCX
      XEZxdL751tZWVq9e7Z9yVtd1Tp06RXNzM6WlpResmuV2uzlx4gR2u52SkhIyMjJwu9309fUx
      ODhIXV0dq1at8pfn9Xo5evQow8PD487r7/V6qaur47777mPXrl188Ytf9D83MDDAiRMniIiI
      IDs72z8Pek1NDRUVFZSUlFwwQ+boUoqdnZ3k5ub6F8hoamoiPz+fU6dOkZOTQ1JSEocPH6az
      s5PS0lL/snn19fXMmzcPg8HA0NAQLpeL1NRUmpqacDgcFz0uQohPr4veASxcuJBt27axb98+
      VFVFURQMBgPl5eXs3r0bgF/+8pe89957F2z7xhtvUFZWRkJCAo8//jj9/f1UVlby/PPPA7Bj
      x44Lqova29s5cOAAZrOZhx9+mPb2djo7O/nZz34GnD0B/vznP7/s3PFvvPEG7733HjExMfzw
      hz/k1KlTALS2tnLo0CGMRiMPP/zwBVflf/rTn6ivr8fr9fLd736X9vZ2urq6+OpXv0pZWRkR
      ERF873vfQ1VVvF4vDz30EFVVVbjdbnp6ei6Io6qqiqKiItavXz/m7qO+vp5vf/vbDA4O0tzc
      zL/+678CcOjQIV599VVSU1N5+eWXOX78uH8bXdd57rnnePfdd9E0jZ/97GfU19fj8/n42c9+
      xrPPPsuf//xn3G43//t//2927NhBVFQUzz77LNXV1QD8x3/8B16v1x/bRx99hNfr5Tvf+Q77
      9+9HURQeeeQR2tvbL3l8hRCfHhe9A8jMzOS5557jjTfe4KWXXuLuu+/mrrvuYtWqVRQVFdHe
      3k5UVBS7d+9m8+bN/u00TWPv3r289NJLKIqCx+Nhx44dpKenk5mZyfr167n55psv2F9WVhZ/
      93d/B5yd7/vDDz/ky1/+Mj//+c8ZHBzEarXS0dHBokWLLvpmVFWlrKyMl156CaPRyOLFi3nl
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='Industry&amp;Purchases' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO3daXBUd36v8e853a3WvrYQSEISQgIsbLMbsxhjTxnbQJzM+M4a37rxu0xV
      UncmL27dSvIm90XyYl6knFQyNzW5FSeVyiQp18Qej6fGWGB2AcIGDDIgBhACIUBCW0u9ne2+
      YOgxMzZgWd0Y/Z/PG0ut0zq/bpnz9DmnFysIgkAAAKNYlmXZD3oIAMCDQQAAwFAEAAAMRQAA
      wFAEAAAMRQAAwFAEAAAMRQAwKxw7dkwXL178rcszmYx+8pOfKJPJfOZ1L1++rO7u7rv+/osX
      L2rfvn33nMN1XV27dk2e59176M8plUppaGhIvHQHM4UAYFbwfV9BEMj3fU1NTWliYkKu68rz
      PO3Zs0ejo6NKJBKfuvEMgkBBEMjzPCUSCU1OTiqRSMj3fXmep3g8rosXL+rkyZNyXVfpdFpB
      ECiZTCoIAqVSKU1MTCiVSmlkZET/8i//ouHhYbmuq1QqpXQ6rUQikV3ecRyl0+lPneP273Ic
      R47jKB6Pa3JyUp7n6dy5c/rP//xPTU1Nyff97LKZTEZBECiTyWhiYkJTU1PZ2x6PxxWPx+X7
      fnb2ZDKZXeb27fB9Px9/JnzJhB/0AMBMOH/+vBobG5VOp/XDH/5QqVRKzz77rF566SVdvHhR
      P/jBD5RIJPSXf/mXqqysvOO6N27c0Llz5xSLxfTaa6+pvLxcU1NT+pM/+RMdP35cO3fuVCaT
      0dKlS3X69GkdPXpU3/zmN/Xaa6/p1Vdf1Y9+9CMlk0m1tbUpEolo//79SqfT+sY3vqE33nhD
      QRCouLhYY2Nj+v73v6+DBw8qCAJt3779jjmuXr2qv//7v5fnefrd3/1dJRIJ7dy5U4lEQq+8
      8op27NihDz/8ULZta9u2bfqHf/gHxeNxLVmyRH/wB3+gf/qnf8ruBX3zm9/U9evX9bOf/Uy+
      7+u73/2u0um0Ojs7lUgkFIlEtH79eq1fv15/+7d/q+9+97uqqqrK298LXw7sAWBWmJycVDKZ
      1M6dO/XMM8/oz//8z3X48GENDQ1p/vz5+t73vqfm5madPXv2t66bSqUUj8flOI7Kysr0/e9/
      XxUVFbp06ZL27t2rP/qjP9JXv/pVSVI6nc4+oh4dHdXExISGhob09NNP65lnntGzzz6rjo4O
      vfrqq2ppaVFvb68aGhr06quvKhKJqKenR8ePH1d7e/tvzXHw4EEtXrxYf/qnf6rly5frkUce
      0fbt29XS0qLu7m5t2bJFK1as0He+8x1dunRJnufpa1/7mrq7u3X27Fldu3ZNf/Znf6ampiZN
      Tk7q/fff1x/+4R/q29/+tt555x1NTU2pt7dX3/nOd/SNb3xDe/bs0YULFyRJxcXFuf0D4UuJ
      PQDMKlNTU5o7d67mzZsn6dYGu6CgQFVVVaqrq9PIyMhdrx+NRlVdXa1oNCrHceS6rmKxmG7c
      uPGpy9fW1upb3/qWurq61N3drVdeeUXhcFhlZWUKh8Oqq6vTli1bVFVVpSeffFL79+9XKpXK
      zvebs9fX16u8vFyZTEZvvvmmCgoKVFhYqGQyqaKiIkUiEZWWlmpqakqjo6O6cOGCVq5cKcdx
      FI1GVVVVpWg0mj2kVVtbq6KiIiUSCUnShg0btHTpUkmS53l6++23tWrVKhUUFHyRux0PKfYA
      MKusXr1ab7zxhl577TXV1dWprq5OQ0ND+o//+A91d3frscceu6/fY1mWiouLVVZWpn/8x39U
      Z2enJKm8vFynT5/Wv/7rv+rKlSu6fv26zp07pwULFigej8u2bYXDYf3Xf/2XBgcHFQqFZNu3
      /pktW7ZM586d09KlS1VWVvZb61yxYoV+8Ytf6Mc//rE++ugjxeNxhcPhbLQqKys1MDCgd999
      Vy0tLbIsS5ZlybZtLVmyRAUFBfqLv/gLdXV1KRQKaeHChXr99df1+uuv64knnlAoFFI4HM5e
      b/369Tp+/LjWrVsny7Jm6C+Ah4nFu4HiYZdKpfR3f/d3WrNmjZ544gn19PRodHRUy5YtU3V1
      tY4fP65EIqG5c+eqpKREu3fvluu62es///zzchxHVVVVunHjhhYsWKC+vj7V1NRocnJSp0+f
      VkVFherq6lRbW6sTJ07I930VFRWpra1N586d040bN9TW1qbm5mYNDg6qr69PHR0dGhkZ0fz5
      8xWNRnXt2jX99V//tf74j/9YJSUl+sUvfiHHcbJzbNu2TcPDwxoaGtLixYvluq56e3tVU1Oj
      8vJyzZs3T+fPn9f4+Lgee+wxDQwM6OrVq6qsrFR7e7v6+vo0Pj6ut956S6+88ooaGhp08uRJ
      2batVatWKZVKKZlMqr6+Xo7jaOfOnTpz5oy+973vPYg/Gx4wy7IsAoCH3tGjR3XgwAH9/u//
      vmKx2F2XzWQyGh8fv+PZQLFYLPsoPZdef/11xWIxbd++Xa7ranR09I45qqurFQ5P76jsyMiI
      /v3f/11jY2N69NFH9fzzzysajX7m8ufPn9c777yjr33ta2psbJzWOvFwIwCYFRzHke/7d93g
      fRmkUikVFBTkJDZBEGSf+hmNRu95SMd1Xfm+r0gkwuEfQ82qANx+HngoFHrQowDAl96s+0AY
      XswCAPdvVgUAAHD/CAAAGIoAAIChCAAAGIoAAIChCAAAGIoAAIChCAAAGIoAAIChCAAAGIoA
      AIChCAAAGCpvAbj9bp13+/knPxxDuvXe7bzBGwDkRl4+E9jzPL311ltasmSJOjo6dPDgQV29
      elWhUEhr1qxRbW2tdu7cKcdx1NraqiVLlujEiRMaGBhQcXGxNm/erGvXrslxHDU1NenIkSNa
      vHixampq8jE+AMxKOQ9AEAQ6deqUXNfNfgzf2NiYXnzxRZWUlEiSuru71dLSovb2dr377rsq
      KSnR0NCQtm/frg8//FDnzp1TKBRSOp1WT0+PXNdl4w8AX1DOA3Dz5k0NDg5q6dKl8jxP0q0A
      HDp0SHV1dVq4cKGGh4e1ZMkShcNhlZeXa3x8XOXl5bJtW83Nzfr4449VV1en8+fPK5VK6Xd+
      53ck3YrL7UNEvu/L9/07PusVAPDZchqAIAh07NgxVVVVKR6Py3EcpdNpbdmyRclkUidOnFA6
      nb7n77n9kXW3P0rvk+cSfvO8wiz5gDMAyLmc7wFUV1crkUjo+vXr8n1fo6OjKiwsVGNjoxKJ
      hEZGRlRbW6v+/n4tWrRI4+Pjamxs1ODgoHzf18WLFzVnzhzZtq0FCxYoHA7r0KFD+spXviLb
      trMfon17TyASieT6JgHArJC3zwTu6+tTJpNRc3Oz9uzZo1QqJdd1tXHjRpWWlmrHjh0KgkDz
      58/X448/ru7ubg0NDSkcDmvLli26evWqMpmMWltbdfjwYTU2Nqq5uTn7+33fl+d5BAAA7sMD
      +1D4IAiUyWQUiUSyh3U8z5PruopGo9nlUqmUCgoKssvcDQEAgPv3wAKQCwQAAO6fZVlWXl4H
      8KD4QSDHy1/fbEuKhHhxNYCHw6wOwNCko7d7hvO2vgXVhfrKouq8rQ8AvggergKAoQgAABiK
      AACAoWb1OYAvI8fz9Xc/P5W39VWVRvU/nlmct/UBeHgQgDwL/EAfXxnN2/rqKoryti4ADxcO
      AQGAoQgAABiKAACAoQgAABiKAACAoQgAABiKAACAoQgAABiKAACAoQgAABiKAACAoQgAABiK
      AACAoQgAABiKAACAoQgAABiKAACAoQgAABiKAACAoQgAABiKAACAoQgAABiKAACAoQgAABiK
      AACAoQgAABiKAACAoQgAABiKAACAoQgAABiKAACAoQgAABiKAACAoQgAABiKAACAoQgAABiK
      AACAofIWgEwmI9d1JUm+7ysej8txHAVBoCAIlE6nNTk5Kd/3FQSBPM9TPB5XJpNREATyfV++
      70uSPM9TEAT5Gh0AZqVwPlaSSqX0ox/9SOvWrdPq1au1e/duJZNJTU1NafPmzQqHw+rs7FRp
      aakKCwu1du1a7d27V5I0OTmpF198UQMDA0qn01q4cKE6Ozv11FNPqbq6Oh/jA8CslPMAeJ6n
      w4cP65FHHlFBQYESiYQmJye1bds2nTt3TleuXNHk5KTWrVun+vp67dy5U/39/SooKNAzzzyj
      3t5enT17VqWlpfI8T93d3WptbWXjDwBfUM4DMDg4KM/z1NjYqEwmo8nJSZWXlysUCqmiokLD
      w8OamppSVVWVbNtWUVGRksmkioqKZNu2YrGYrl69qsLCQh0+fFiVlZXasGGDpFuHkm4fVrp9
      mMjzvOy6nYyb65t3B9/3lUql7rqM4/l5muaWIAjuORMAM+U0AEEQ6MiRIyovL1dvb688z1Nl
      ZWV2g5TJZBQOhxUKhbLnAzzPUzgczh7nT6VSikajCofDWrVqlfr7+3X9+nU1NjbKsixFIhFJ
      yp4jCId/fZPCGSuXN++32LataDR612Us17vrz2ecZd1zJgBmyvkewNq1a+U4ji5duiTXdVVd
      Xa1EIqGbN2+qv79fdXV1Ki8v15kzZ9TR0aHx8XG1t7fr0qVLmpqa0tmzZ9XW1pYNwdq1a/Xh
      hx9qzpw5KigoyK7Hsqw7/vubX+fLvdZpKb8zWXow9wOAL7+cBsCyLDU0NEiSSkpK5LquSktL
      tWbNmuzhnObmZkUiER08eFD79+/XihUrVF9fr0QioT179qi2tlZNTU0aHh6W67qaN2+e0um0
      hoeHVV9fn8vxAWBWy8uzgCSptrY2+3VjY6Pq6+tl23b20emGDRvk+75CoZAkqb29Xa2trdll
      Pnn9hQsX5mtsAJi18haAT7IsK7uhv9tlv/k9AGDm8EpgADAUAQAAQxEAADAUAQAAQxEAADAU
      AQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAU
      AQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAU
      AQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAUAQAAQxEAADAU
      AQAAQxEAADAUAQAAQ+UlAJ7nyXEcBUHwmcv4vi/Hce64zHEc+b6f6/EAwEjhXK/g4sWLOnHi
      hCzLUkNDg1atWqXu7m5dvnxZtm1rzZo1qqur065du5RMJrVkyRK1t7fr1KlT6uvrU3l5uTZt
      2qRr167JcRw1NTXpgw8+UGtrq2pqanI9PgDMWjkPQF1dnbZv3y7f9/XGG29o1apVunnzpp5/
      /nmVlpZKko4ePaqGhgYtXrxY7777rqLRqAYGBrR9+3YdPXpU586dk2VZSqfT6unp0dTUFBt/
      APiCch6AgoICXbp0SSdOnND8+fNlWZZu3rypDz74QPX19WpqatLw8LDWr1+vcDissrIyjY2N
      qaKiQrZtq6WlRWfOnNGcOXN0+fJlxeNxbd26VZIUBEH2EFEQBAqCQJ7nZded78NHv7n+T+P5
      d//5TAuke84EwEw5D0AQBHJdV7W1tXJdV47j6LnnnlMikdDHH3+syclJ2bYtz/OyG3HLsrIb
      b8/zZNu2giBQMplUUVGR0ul09nd/MgC/ucH/UgbAy/M5jfuYCYCZch6AkZERNTc3q6mpSW+9
      9ZbGx8eVyWTU0NCg8fFxOY6j+vp69fb26tFHH9X4+Lja2trU39+vVCqls2fPqqWlRZlMRosW
      LVJlZaW6urr04osvKhKJyLZvncf2fV+e5ykSifz6xqVzfevuZNu2CgoK7r6Qld+NsWVZ954J
      gJFyHoDR0VEdOXJEnuepo6NDlZWV6u3t1YkTJ1RUVKQnn3xSRUVF2rdvn3bu3Knly5eroaFB
      iURC7733nmpra9XS0qKhoSE5jqOGhgal02ldv35djY2NuR4fAGatnAdg8eLFWrRokYIgkG3b
      sixL69atk+/72e8l6amnnlIQBAqFQpKkRYsWqbW1VaFQSJZlac6cOdnf2d7enuuxAWDWy3kA
      LMvKbuQ/edntDf1ttw/lfFI4nPPxAMBYvBIYAAxFAADAUAQAAAxFAADAUAQAAAxFAADAUAQA
      AAxFAADAULzSCpKk/7fnvEanMnlZV0usRP/tiaa8rAvAZyMAkCRNJB2NJZx7LzgDJtNuXtYD
      4O44BAQAhiIAAGAoAgAAhiIAAGAoAgAAhiIAAGAoAgAAhiIAAGAoAgAAhiIAAGAoAgAAhiIA
      AGAoAgAAhiIAAGAoAgAAhiIAAGAoAgAAhiIAAGAoAgAAhiIAAGAoAgAAhiIAAGAoAgAAhiIA
      AGAoAgAAhiIAAGAoAgAAhiIAAGAoAgAAhiIAAGAoAgAAhiIAAGAoAgAAhiIAAGCocK5XMD4+
      rsHBQXmep9raWs2ZM0fj4+O6cuWKSktL1dDQoFAopL6+PiUSCTU0NKiiokIjIyMaHBxUeXm5
      5s+fr0QiId/3VVZWphs3bqisrExFRUW5Hh8AZq2c7wHE43FlMhkFQaA9e/bI930dOHBAjuPo
      1KlTGhwc1MDAgE6fPi3f99XV1aXR0VF1dXXJsiwdP35cN2/e1JUrV3Tx4kXdvHlTXV1dCoIg
      16MDwKyW8z2AhoYGVVVV6fLlyyosLFQ8HpdlWVq+fLkqKyt19epVTUxM6Mknn1RlZaWGh4d1
      5coVlZeXq6OjQ+Xl5ert7VVNTY3S6bT27dun1atXq7i4ONejA8CslvMAZDIZdXd3q7e3VytX
      rlQ6nc4euolGo3IcR67rqqCgQJZlKRwOy3VdhcO3RisqKlIqlZLrujpy5IhisZjmzJkjSfJ9
      X47jZNfl+75c1/3Eul3lk+f7SiaTd13G8fw8TXOLHwT3nElSXveofO/e9xOA3Mt5AKLRqDZv
      3qw1a9bo5z//uZqamjQ5OSlJSiQSKigoUEFBgZLJpIqLi5XJZFRZWal4PC7p1iGk4uJihcNh
      PfXUU7p8+bL6+vq0aNEi2bataDQq6dbG3/M8RSKR7LoL3IykeK5vYlbItu95XiLkeHma5hbb
      su7rXIllWXmY5hY7dO/7CUDu5TwAH3/8sXz/1qNe13VVUVEh27b14YcfamBgQCtWrJBlWTp8
      +LCam5uVTqfV2Niovr4+ffzxx+rt7dXTTz+toaEhSdKmTZvU2dmpWCym6urqXI8PALNWzgNQ
      W1ur69evy/M8PfPMM4pGo1q/fr36+/v16KOPau7cuQqFQkqlUpqamtL69etVUVGhdevWaWBg
      QCtXrlRVVZUKCgqyzwLatGlT9hARAGB68hKA2traOy6rrKxUZWXlHZctXLjwju9jsZhisVj2
      +9LS0uzXNTU1OZgUAMzCC8EAwFAEAAAMRQAAwFAEAAAMRQAAwFAEAAAMRQAAwFAEAAAMRQAA
      wFAEAAAMRQAAwFAEAAAMRQAAwFAEAAAMRQAAwFAEAAAMRQAAwFAEAAAMRQAAwFAEAAAMRQAA
      wFAEAAAMRQAAwFAEAAAMRQAAwFAEAAAMRQAAwFAEAAAMRQAAwFAEAAAMRQAAwFAEAAAMRQAA
      wFAEAAAMRQAAwFAEAAAMRQAAwFCfKwC+7ysIglzNAgDIo88VgK9//et68803czULACCPOAQE
      AIaaVgDOnDmjf/7nf57pWQAAeTStAJw/f15vvPHGTM8CAMijL3wI6K/+6q907NixmZgFAJBH
      XzgA+/fv1/Xr12diFgBAHoU/z8I/+MEPVF1dLcuytGTJEknS3/zN36i2tjYnwwEAcudzBaC1
      tTX7dUVFhSRp4cKF97xeEARKpVIqLCyUZVmfuozneXIcR4WFhdnLksmkCgoKFAqFPs+YAID7
      8LkCMB2XLl3S0aNHZdu2LMvSSy+9pB07dmh8fFwFBQVas2aNysrKtGPHDkWjUVVVVWn16tU6
      cOCAksmkHMfRCy+8oIGBAWUyGbW2tur999/X2rVrVVNTk+vxAWDWmlYAXNeVZVnyPE+ZTEZF
      RUWf+Si9urpa27Ztk23b+slPfiLf95XJZPTCCy+orKxMtm3rwIEDWr16tebPn6/Ozk719/cr
      CAJt27ZNPT096u3tVVFRkVzX1bFjx1RXV8fGHwC+oGkFoKurSzU1NTp+/Lh6e3v10ksvaeXK
      lZ+6bFlZmdLptDo7O9XS0qJwOCzHcbRv3z4VFRVpzZo1mpiY0LJlyxQKhVRSUqKpqSmVlJTI
      tm3NmzdPJ0+eVCQS0QcffKCioiK9/PLLkm69NYXneZJuHWbyfV++72fX7TjudG7etPm+r3Q6
      fddlHM+/689nWhAE95zp9nL5cj/3E4Dcm1YAbj9Cv3HjhjZv3qwLFy58ZgASiYR27dqlhQsX
      qr29XZK0detWua6rU6dOqaenR7Zty3VdBUEgz/MUCoWy7zuUyWQUiUQUCoXU3t6ua9euaXR0
      VHV1dbIsK7vncXvDHw7/+iaFQ/l93yLLthWJRO66TGB5eZrmVyzrnjP9asGcj5Jdk3Xv+wlA
      7k0rAI2NjXr77be1YcMGua6bPSH8afr7+1VVVaUlS5bIsiwlk0mNj4+rrq5OZWVlmpqa0ty5
      c3X+/Hk99thjGhsbU2trq/r7++V5nn75y1+qoaEhu57GxkYdOXJEW7duVSgUuuOkchAEsu1f
      P7PVsvP7TheWdMf6P41t5TlKuvdMkvQZ5+ZzwrLubyYAuTWtAGzcuFFNTU1yHEeVlZUqKir6
      zGWTyaSuXr2qN998U9FoVJs2bdLZs2fV1dWlwsJCPfXUUyoqKtL777+vn/3sZ1q2bJkaGxs1
      OTmpn/70p4rFYmptbdW1a9fkuq4aGxuVSqU0MDCgpqamad9wADDdtAJw6NAh7d27V2VlZVq2
      bJk8z9PmzZs/ddkVK1ZoxYoVd1y2adOm7KGe24/gn332Wfm+nz2E09HRofb29uwy8+bNy17/
      kUcemc7YAIBPmNZ+eF9fn7Zv367a2loFQaDR0dHPdX3LshQOh+84fGPb9h3H7yUpEolwqAAA
      cmRaewBtbW16++23NT4+ruLiYn3961+f6bkAADk2rQCsWrVKdXV1GhoaUnV1tRYsWDDTcwEA
      cmxax1d27dql0dFRHTt2TD/84Q/V1dU103MBAHJsWnsAw8PDCofDSiaT+r3f+z0NDg7O9FwA
      gByb1h5AW1ubDh48qI6Ojt96hg4A4OEwrT2Axx9/XGVlZfI8T77vq76+fqbnAgDk2LQCcPDg
      Qe3cuVO+7ysajWrLli2KxWIzPRsAIIem/V5A27ZtU39/v9rb23Xjxo2ZngsAkGPTOgcwf/58
      RaNRJRIJ7dixY6ZnAgDkwbT2AJ5++mlJtz4N7Pr162pubp7RoQAAuTetALz//vvas2ePCgoK
      JN16e+fVq1fP6GAAgNyaVgCuXLmiF198MfvB8CUlJTM6FAAg9z5XAEZHR7V3797sh7Jcv35d
      0q13/OTtIADg4fK5AhAOhxWLxbR27drs967r8ulOAPAQ+lzPAiorK9OGDRsUiUS0YMECbdq0
      SfX19RoZGcnVfACAHJn25wHE43FJ0s2bN3Xx4sUZHQoAkHvTOgm8bNkyvfXWW9q/f79GR0f1
      rW99a6bnAgDk2LQCEI1G9e1vf1uu66qhoUFlZWUzPRcAIMemdQhoYGBAR48e1cKFC9n4A8BD
      alp7AJZl6Z133tGZM2dUVFSk559/XsuXL5/p2QAAOTStAKxevTr7IjBJKi8vn7GBAAD5Ma0A
      9PT0ZD8GMp1O67nnntOqVatmdDAAQG5NKwCLFy9WXV2dJOnYsWMaHR2d0aEAALk3rQAkk0nd
      vHlTkpRIJJRKpWZ0KABA7k37Q+FPnz6tIAgUCoW0cePGmZ4LAJBj03oaaEtLi2KxmIIg0MKF
      C/lQeAB4CE0rAO+++66uXr2qRx99VIcOHdKRI0dmei4AQI5N+3UA69ev1yOPPCLbtnX58uWZ
      ngsAkGPTCkBZWZn+7d/+TcXFxZqampLv+xoZGdHLL7/MK4MB4CExrQBs3LhRK1asuPMXhcMq
      Li6ekaEAALk3rQCUlJTwMZAA8JCb1klgAMDDjwAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAY
      igAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAYalrvBvp5pNNp3bhxQ8lkUtXV1YrFYpqcnNTg
      4KBKS0s1Z84c2batq1evKplMqq6uTqWlpRofH9fQ0JDKyspUV1enVCol3/dVUlKikZERlZSU
      KBqN5np8AJi1cr4H0N/frwsXLmhiYkKdnZ3yPE/79u3TyMiIuru7df36dV27dk0ffPCBxsfH
      deDAAY2Pj2v//v2Kx+Pq6urS2NiY+vv7df78eY2Pj2vv3r1yHCfXowPArJbzPYC2tja1tbVp
      bGxMFy9e1MTEhIIg0BNPPKG+vj5dvnxZExMT2rBhg6qqqrR792719/ervLxcK1asUCwW0+nT
      p1VTU6NMJqM9e/Zo5cqVKi0tzfXoADCr5TwAknTz5k3t3r1by5cvl+M4Ki4ulmVZKiwslOM4
      cl1X0WhUlmUpEonIdV2Fw7dGKy4uViqVkuu6OnTokGprazV37lxJku/7d+wJ+L4v13Wz32cy
      rvLJ830lk8m7LuN4fp6mucUPgnvOJElBEORhmlt87973E4Dcy3kARkdHtWvXLj377LOKxWKK
      x+OampqSJCWTSRUUFCgSiSiVSqm4uFiO4ygSiSgej0uSJicnVVxcrHA4rE2bNunSpUvq7+9X
      W1ubbNvOngfwfV+e5ykSiWTXXeBmJMVzfROzQratoqKiuy/jeHma5hbbsu45kyRZlpWHaW6x
      Q/e+nwDkXs7PAZw/f17l5eUaGxtTX1+fioqKFASBenp6dObMGc2dO1eLFi3S0aNHde7cOSWT
      SdXX12tiYkK//OUv9dFHH2nhwoXZ37dx40adOnVKY2NjuR4dAGa1nO8BzJs3T5FIRIlEIntY
      Z926dbpw4YLa2tpUX1+vUCikRCKhiYkJPfnkk6qurtaaNWt0+fJldXR0KBaLKecSwlcAAAS3
      SURBVBqNyvd9VVZWat26dXk9ZIEHw83z4bJwiGdFwyw5D0BjY6MaGxvvuKympkY1NTV3XLZk
      yZI7vp87d272WL8klZeXZ7+uq6vLwaT4svnfP/5Afp5CX1oY1v/5+sq8rAv4suAhDwAYigAA
      gKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAA
      gKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAA
      gKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAAgKEIAAAYigAA
      gKEIAAAYigAAgKEIAAAYigAAgKHCD3oA4GHyf3+yTwNDY3lb3//678+prLgwb+uDWQgA8Dns
      OtqrnguDeVvf//zmMyorztvqYBgOAQGAofIWAM/z7vnzdDp9x2WpVEq+7+dyLAAwVs4PAcXj
      cX300Ue6evWqvvrVryocDquzs1MjIyOKRCJas2aNKioq9N577ykcDqu2tlYrVqzQ4cOHNTEx
      oSAI9Nxzz2lwcFDpdFqtra3as2ePVq1apZqamlyPDwCzVs4DEASBGhoadOPGjexlqVRKW7du
      VUlJiSzLUldXlx5//HG1tLTovffe0+XLl5VOp7Vt2zadPHlS586dUzQaleM4OnHihCoqKtj4
      A8AXlPMAlJeXq7y8XCdOnMhelkgktHv3blVUVGj58uUaGxvTY489plAopJKSEsXjcZWWlsq2
      bTU0NOjkyZOqq6vT8ePHFQ6H9fLLL0uSfN/PHloKgkC+7ysIgux6XNfN9c27g+/7ymQyd10m
      4+b3kFYQBPec6fZy+eL79zdTXgX60t1PkuQ4zpfvvsKs8UCeBbR161Y5jqOPPvpIPT09sm1b
      nucpCAIFQSDbtrMbc8dxFA6HZdu2GhsbNTw8rHg8rmg0KsuyZNu3TmPc/ocZCoWy67Ht/G5s
      Lcu6Y/2fJpTf7Yd0HzP9asGcj5Jdk6X7nCmP7nOm/N1Lt9i2/eW7rzBr5D0AqVRKiURCtbW1
      isViisfjmjNnji5cuKClS5dqbGxMLS0tunLlijzP0/nz5zV37lz5vq9YLKbm5mYdPnxYL7zw
      gkKhUPYfx+1g3BmAu594nmn3FYA8n9O2dJ8btjxu2e7nfnoQ7mumfN5R0h3/jwMzLecB6O3t
      VW9vr+LxuDo7O7VmzRr19PRofHxckUhEGzduVHFxsXbt2qWLFy+qo6NDjY2NGhsb009/+lNV
      VlaqtbVV165dUzQaVVNTk6ampjQwMKCmpqZcjw8As1bOA7Bo0SItWrTojss2b94s13UVDodl
      /eoR1XPPPSfP8xSJRCRJy5YtU0dHh0KhUPZcwG2PP/54rscGgFnvgZwDsCwru6G/zbbt7PH8
      235zGQDAzOGVwABgKAIAAIYiAABgKAIAAIYiAABgKAIAAIYiAABgKAIAAIYiAABgKAIAAIYi
      AABgKAIAAIYiAABgKAIAAIYiAABgKAIAAIYiAABgKAIAAIYiAABgKAIAAIYiAABgKAIAAIYi
      AABgKAIAAIYiAABgKAIAAIb6/4437p+dn68gAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='Sheet 4' width='384'>
      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
      m1WZhQKF9PImipsbG2H64oVr3rDGsW1s68rJMCUAhBCizA6//ktGThwDjHlwegAAD0pJREFU
      oP+zj/jqd29QKuTJxGOUCnlsy6KQSZOdjWObJmaxgOM4mMUihUyas+/+N5puUCoUyMRjmIU8
      juOQTyUppFPMDPYzfvokxVwWs1AAwCzk5RqAEEKUW6S5lWR0HLNQIDc3S2VdPTP9F4gND1LK
      ZmnbtYe+gx9gBII0rNtIemaKjj2PcOnoYXzhMLlEgtzcLPlkgvjIEGYuR8u2HYz2fEWoqYl8
      MkFyMoo3WMH0xQtsfPp5Lnz0vhwBCCFEuWm6TqCqhtGTxwk3t6KoGigKjmWRic9QyuVo3rKd
      zv2PUcikMAsFHAfMYoFwUwsN6zbSvKUbAMeySMdmmBnop3P/o3TsOUBd13pau3dR98BazML8
      LXRLhYIEgBBC3A3Cq1oYP91DuKkZgOjZU7Tv2ksgUn3V+kx8hnwycdnfoufP0L57L4FIFbo/
      QGoySnYujkc3yM3NUsxlsUyT9PQUpXxWTgEJIUS5NW/dQbihiY49B4isakbVNKxikan+XhrW
      byLU2IRtmej+ALVrujCLBab7zlPdtgZvRSXND24DoLV7J1N9vTRu2ExtRxfjp3uIDQ3QtHEL
      qalJkhPjNG18kIlzp1m1aasEgBBClFt1axsAjRs2A1DVshqA2o4Hrqg1/IHLagCqFpav61xL
      Xefaxb+37967+PvqHbsXf29cvwmQXkBCCOFaEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBC
      COFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBC
      COFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBC
      COFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBC
      COFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSEgBCCOFSnus9uKE+wkub
      2u5UW8Q9qrHSX+4mCCFW4LoBMJLOcTgau1NtEfeo1TWV5W6CEGIFrhsAedMiUSjdqbaIe1RA
      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
    </thumbnail>
    <thumbnail height='384' name='Sheet 6' width='384'>
      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
      gmIAEBEJ6v8DvPemcv7wFRIAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
